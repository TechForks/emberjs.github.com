<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2013-02-15T00:00:00Z</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title/>
    <link rel="alternate" href="/blog/2013/02/15/ember-1-0-rc.html"/>
    <id>/blog/2013/02/15/ember-1-0-rc.html</id>
    <published>2013-02-15T00:00:00Z</published>
    <updated>2013-02-15T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv="Refresh" content="0; url=/blog/2013/02/15/ember-1-0-rc" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;/body&gt;
&lt;/html&gt;
</summary>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv="Refresh" content="0; url=/blog/2013/02/15/ember-1-0-rc" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry>
    <title>Ember 1.0 RC</title>
    <link rel="alternate" href="/blog/2013/02/15/ember-1-0-rc"/>
    <id>/blog/2013/02/15/ember-1-0-rc</id>
    <published>2013-02-15T00:00:00Z</published>
    <updated>2013-02-15T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Today at Ember Camp, we announced the release of Ember.js 1.0 RC1.&lt;/p&gt;

&lt;p&gt;This release is all about fixing bugs from the &lt;code&gt;pre4&lt;/code&gt; release, and
gets us that much closer to a final 1.0 release. Between this release
and the 1.0 final, we will mostly be focusing on stability and documentation.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Today at Ember Camp, we announced the release of Ember.js 1.0 RC1.&lt;/p&gt;

&lt;p&gt;This release is all about fixing bugs from the &lt;code&gt;pre4&lt;/code&gt; release, and
gets us that much closer to a final 1.0 release. Between this release
and the 1.0 final, we will mostly be focusing on stability and documentation.&lt;/p&gt;

&lt;p&gt;If you discover any blocking bugs or undocumented areas, please file tickets at
the emberjs/ember.js repo on GitHub and consider helping out.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_route-replacement'&gt;Route Replacement&lt;/h3&gt;
&lt;p&gt;You can now transition to a new route without creating an entry in the history:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// instead of this, which creates a history entry&lt;/span&gt;
router.transitionTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;index&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class="comment"&gt;// do this&lt;/span&gt;
router.replaceWith(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;index&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;In the &lt;code&gt;redirect&lt;/code&gt; hook, you can just use &lt;code&gt;replaceWith&lt;/code&gt; and Ember won&amp;#39;t create
a history entry.&lt;/p&gt;

&lt;p&gt;In a controller, you can use &lt;code&gt;replaceRoute&lt;/code&gt; (instead of &lt;code&gt;transitionToRoute&lt;/code&gt;)
to do the same thing.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_item-controller'&gt;Item Controller&lt;/h3&gt;
&lt;p&gt;If you want every item in a &lt;code&gt;{{#each}}&lt;/code&gt; to be wrapped in an &lt;code&gt;ObjectController&lt;/code&gt;,
you can do so easily:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{{&lt;span class="error"&gt;#&lt;/span&gt;each posts itemController=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}}
  {{!-- &lt;span class="error"&gt;`&lt;/span&gt;&lt;span class="local-variable"&gt;this&lt;/span&gt;&lt;span class="error"&gt;`&lt;/span&gt; &lt;span class="keyword"&gt;in&lt;/span&gt; here is each post wrapped &lt;span class="keyword"&gt;in&lt;/span&gt; an App.PostController --}}
{{&lt;span class="regexp"&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="content"&gt;each}}
&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_register-and-inject'&gt;Register and Inject&lt;/h3&gt;
&lt;p&gt;Internally, Ember uses a &amp;quot;container&amp;quot; to instantiate your controllers and other
objects.&lt;/p&gt;

&lt;p&gt;As of Ember 1.0 RC1, you can use &lt;code&gt;App.register&lt;/code&gt; to override the default lookup
for controllers and other objects. For example:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.register(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller:post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, Ember.ObjectController.extend());
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;In general, you should use the default naming conventions, which Ember will use
to find objects, but you can use this API for advanced usages.&lt;/p&gt;

&lt;p&gt;Similarly, you can use &lt;code&gt;App.inject&lt;/code&gt; to tell Ember to automatically inject
objects into other Ember objects.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.register(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;network:main&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, App.NetworkAdapter);
App.inject(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;network&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;network:main&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;This will create a single instance of &lt;code&gt;App.NetworkAdapter&lt;/code&gt; and give it to every
controller created over the course of building your application. Internally,
Ember Data uses this API to give every controller the application&amp;#39;s store:&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_router-activate-and-deactivate'&gt;Router Activate and Deactivate&lt;/h3&gt;
&lt;p&gt;Currently, many people are using the undocumented and private &lt;code&gt;enter&lt;/code&gt; and
&lt;code&gt;exit&lt;/code&gt; hooks to run code whenever Ember activates a route handler or
deactivates it.&lt;/p&gt;

&lt;p&gt;As of Ember 1.0 RC1, there are public hooks: &lt;code&gt;activate&lt;/code&gt; and &lt;code&gt;deactivate&lt;/code&gt;. Note
that the &lt;code&gt;activate&lt;/code&gt; hook will run only when a route handler is activated for
the first time. If a route handler&amp;#39;s context changes, the &lt;code&gt;setupController&lt;/code&gt;
hook will run again, but not the &lt;code&gt;activate&lt;/code&gt; hook.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_app-reset'&gt;App.reset()&lt;/h3&gt;
&lt;p&gt;If you are trying to run integration tests with Ember, you might have noticed
that there is no good way to reset all of an application&amp;#39;s state.&lt;/p&gt;

&lt;p&gt;No more!&lt;/p&gt;

&lt;p&gt;As of Ember 1.0 RC1, you can call &lt;code&gt;App.reset()&lt;/code&gt; to destroy all objects created
for the application, and bring the application back to &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_big-list-of-changes'&gt;Big List of Changes&lt;/h3&gt;
&lt;p&gt;Since &lt;code&gt;.pre4&lt;/code&gt;, we&amp;#39;ve added these features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added the ability to replace the current route without adding a history
entry, using &lt;code&gt;router.replaceWith&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added support for String literals in &lt;code&gt;{{action}}&lt;/code&gt; and &lt;code&gt;{{linkTo}}&lt;/code&gt; to
differentiate between static String parameters and properties on the current
context&lt;/li&gt;
&lt;li&gt;Allow redirection from routes that are not the final resting route&lt;/li&gt;
&lt;li&gt;Fix a bug where using named outlets would confuse where child templates should
be rendered into&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;itemController&lt;/code&gt;, which allows a &lt;code&gt;{{#each}}&lt;/code&gt; to wrap each iterated element
in a controller that can be used to store transient state&lt;/li&gt;
&lt;li&gt;Fix a bug involving {{else}} templates only working a single time&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;intersection&lt;/code&gt; to &lt;code&gt;EnumerableUtils&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;App.register&lt;/code&gt; and &lt;code&gt;App.inject&lt;/code&gt; to control the default application&amp;#39;s
dependency injection container&lt;/li&gt;
&lt;li&gt;Fixes regressions in jQuery 1.9 to address changes made to .attr and .prop&lt;/li&gt;
&lt;li&gt;Add support for &lt;code&gt;{{unbound helper}}&lt;/code&gt; where &lt;code&gt;helper&lt;/code&gt; is a custom helper
registered via &lt;code&gt;Ember.Handlebars.registerBoundHelper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;Ember.debug&lt;/code&gt; to print debug-level warnings and use it to print the
current version of Ember and its dependencies on boot&lt;/li&gt;
&lt;li&gt;Fix a bug where changing the model property passed to &lt;code&gt;{{render}}&lt;/code&gt; does not
update the rendered template&lt;/li&gt;
&lt;li&gt;Added public &lt;code&gt;activate&lt;/code&gt; and &lt;code&gt;deactivate&lt;/code&gt; hooks in the router. If you were
using the private &lt;code&gt;enter&lt;/code&gt; and &lt;code&gt;exit&lt;/code&gt; methods, please switch!&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;Application#reset&lt;/code&gt; to help with integration tests&lt;/li&gt;
&lt;li&gt;Several fixes for the Ember Inspector&lt;/li&gt;
&lt;li&gt;Many bug and performance fixes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see the full changelog at &lt;a href="https://github.com/emberjs/ember.js/blob/master/CHANGELOG"&gt;the official CHANGELOG&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title/>
    <link rel="alternate" href="/blog/2013/01/18/this-week-in-ember-js-4.html"/>
    <id>/blog/2013/01/18/this-week-in-ember-js-4.html</id>
    <published>2013-01-18T00:00:00Z</published>
    <updated>2013-01-18T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv="Refresh" content="0; url=/blog/2013/01/18/this-week-in-ember-js-4" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;/body&gt;
&lt;/html&gt;
</summary>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv="Refresh" content="0; url=/blog/2013/01/18/this-week-in-ember-js-4" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry>
    <title>This Week in Ember</title>
    <link rel="alternate" href="/blog/2013/01/18/this-week-in-ember-js-4"/>
    <id>/blog/2013/01/18/this-week-in-ember-js-4</id>
    <published>2013-01-18T00:00:00Z</published>
    <updated>2013-01-18T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;It&amp;#39;s been a big month for Ember.js, and we&amp;#39;re excited about the progress
that we&amp;#39;ve made. With so much going on, it can be hard to
keep up-to-date with the project, so here&amp;#39;s what you need to know.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;It&amp;#39;s been a big month for Ember.js, and we&amp;#39;re excited about the progress
that we&amp;#39;ve made. With so much going on, it can be hard to
keep up-to-date with the project, so here&amp;#39;s what you need to know.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-camp'&gt;Ember Camp&lt;/h2&gt;
&lt;p&gt;While we have an incredible network of local meetup groups, &lt;a href="http://www.embercamp.com"&gt;Ember
Camp&lt;/a&gt; is the first national event for the Ember
community.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve been working hard on making sure that this event is both fun and
educational, and we&amp;#39;ll be announcing the lineup of speakers soon.
Unfortuately, tickets have sold out, so if you didn&amp;#39;t get yours this
time, make sure you grab a ticket next year!&lt;/p&gt;

&lt;p&gt;While Ember Camp is happening, keep an eye on this website and on &lt;a href="https://twitter.com/emberjs"&gt;our
Twitter account&lt;/a&gt;. There will be several announcements you won&amp;#39;t want
to miss!&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_peepcode'&gt;PeepCode&lt;/h2&gt;
&lt;p&gt;We were fortunate enough to get to spend a day with Geoffrey Grosenbach,
reviewing his in-progress PeepCode screencast about Ember.js. He spent a
lot of time getting to know Ember in-depth, and we think the final
product will be invaluable for new developers getting started with the
framework.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Finished an Ember.js demo app, filming screencast tomorrow, will publish next week. Fun stuff! &lt;a href="https://t.co/Sq4q85Ql" title="https://peepcode.com/system/uploads/2013/peepcode-emberjs-demo.png"&gt;peepcode.com/system/uploads…&lt;/a&gt;&lt;/p&gt;&amp;mdash; PeepCode (@peepcode) &lt;a href="https://twitter.com/peepcode/status/291350861207187456" data-datetime="2013-01-16T01:07:13+00:00"&gt;January 16, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_the-road-to-1-0'&gt;The Road to 1.0&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;ve been tracking &lt;code&gt;master&lt;/code&gt; over the last month, you know that we
have made many large improvements to Ember.js in quick succession. Some
of these involved API changes that were not backwards compatible.&lt;/p&gt;

&lt;p&gt;We appreciate your patience as we round the corner to a 1.0 release. We
take feedback about &amp;quot;developer ergonomics&amp;quot; extremely seriously, and
we&amp;#39;re not willing to rush out a release if we&amp;#39;re not satisfied that the
API is as good as we can make it.&lt;/p&gt;

&lt;p&gt;Thanks for all your excellent feedback on earlier iterations of the
router API. Learning about how you found the API confusing or hard to
use drove our work on the final version that is shipping in &lt;code&gt;pre4&lt;/code&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_the-router'&gt;The Router&lt;/h3&gt;
&lt;p&gt;The first iteration of the Ember.js router (which some have colloquially
begun referring to as &amp;quot;v1&amp;quot;) allowed us to begin fleshing out some
conventions around application structure. Previously, application
structure was mostly done on an ad hoc basis, but common conventions
emerged in the community, which we rolled into &amp;quot;Router v1.&amp;quot;&lt;/p&gt;

&lt;p&gt;However, despite the fact that developers appreciated conventions around
app structure, their reaction to the first version of the API could
generously be described as &lt;em&gt;horrified&lt;/em&gt;. Indeed, the router for large
applications began to look like the twisted amalgams of views in old
SproutCore applications. We knew we had to head back to the drawing
board with the lessons we had learned.&lt;/p&gt;

&lt;p&gt;The reaction to &amp;quot;v2&amp;quot; of our router proposal, in contrast, has been
overwhelmingly positive. While we&amp;#39;ve had to make several tweaks over the
past month to make sure the API is as intuitive as possible, the overall
concepts behind the API have remained stable.&lt;/p&gt;

&lt;p&gt;We believe that we&amp;#39;ve finally worked out all of the kinks, and do not
have any plans to make any further backwards-incompatible changes to the
router API before the final 1.0 release.&lt;/p&gt;

&lt;p&gt;To learn what this router API is all about, head over to the &lt;a href="http://www.emberjs.com/guides/routing/"&gt;Routing
guide&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_api-freeze'&gt;API Freeze&lt;/h3&gt;
&lt;p&gt;In the run-up to Ember 1.0, we have chosen to aggressively make API
changes in response to your feedback in an effort to make the 1.0 API as
good as possible.&lt;/p&gt;

&lt;p&gt;The reward for putting up with that level of churn is that we plan to
keep things very stable after 1.0. As we get close to that milestone, we
are starting to freeze portions of the API.&lt;/p&gt;

&lt;p&gt;As of today, we will no longer make changes to the API that affect
high-level tutorials, screencasts or our introductory-level
documentation, unless such a change is necessary to address a critical
bug.&lt;/p&gt;

&lt;p&gt;When we release the first RC, we will no longer make changes that affect
any part of the documented API–again–unless such a change is necessary
to address a critical bug.&lt;/p&gt;

&lt;p&gt;In keeping with &lt;a href="http://semver.org/"&gt;SemVer&lt;/a&gt;, once we release the final 1.0, we will
not make breaking, backwards-incompatible changes to publicly documented
APIs until Ember 2.0. We may deprecate APIs, and print deprecation
warnings in the debug build, but things will continue to work.&lt;/p&gt;

&lt;p&gt;In order to facilitate these API freezes, we are planning on taking
several steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We will convert high-profile screencasts and much of our public
documentation into integration tests. &amp;quot;Your commit broke the PeepCode
screencast&amp;quot; is something that Travis will tell contributors.&lt;/li&gt;
&lt;li&gt;We will freeze the Ember 1.0 tests and run them against all builds of
Ember in the 1.x series. This will notify us if we make a
potentially backwards-incompatible change, and we can examine if it
is the result of an API change or simply brittle tests. If we have to
modify an old test, we will announce it here.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class='anchorable-toc' id='toc_documentation'&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Perhaps the most widespread feedback we received from developers was:
&lt;em&gt;&amp;quot;Ember.js looks really cool, but your documentation sucks.&amp;quot;&lt;/em&gt; We heard
you loud and clear.&lt;/p&gt;

&lt;p&gt;We recently launched the &lt;a href="http://www.emberjs.com/guides/"&gt;completely redesigned Guides&lt;/a&gt;, and due to
their more focused nature, have been able to rapidly iterate on them.
Since deploying the new site, the bounce rate has dropped dramatically
and engagement with any particular page has nearly doubled.&lt;/p&gt;

&lt;p&gt;We have lots more great documentation coming your way as we approach the
1.0 release, and we think the design work that &lt;a href="http://www.heropixel.com"&gt;Matt Grantham&lt;/a&gt; did on
the new guides will make them much easier for new developers to approach.&lt;/p&gt;

&lt;p&gt;We are also working on improving the API reference documentation. In
particular, &lt;a href="https://twitter.com/stefanpenner"&gt;Stefan Penner&lt;/a&gt; has been putting in a heroic effort to
bring them up to a similarly polished look-and-feel as the guides.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_thanks'&gt;Thanks&lt;/h2&gt;
&lt;p&gt;We&amp;#39;ve been working on Ember.js for just over a year now, and it&amp;#39;s no
understatement to say that it has attracted some of the best and
brightest web engineers on the planet. It has been extremely gratifying
to see our ideas take form, and we can&amp;#39;t wait to see what 2013 holds for
web applications.&lt;/p&gt;

&lt;p&gt;Big thanks to all of &lt;a href="https://github.com/emberjs/ember.js/graphs/contributors"&gt;our contributors&lt;/a&gt;, who have poured hours of
their nights and weekends into helping us make one of the best tools for
writing ambitious web applications. We quite literally could not have
done it without you.&lt;/p&gt;

&lt;p&gt;Wishing you all the best in the new year,&lt;br&gt;
Yehuda Katz &amp;amp; Tom Dale&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title/>
    <link rel="alternate" href="/blog/2012/12/22/this-week-in-ember-js-3.html"/>
    <id>/blog/2012/12/22/this-week-in-ember-js-3.html</id>
    <published>2012-12-22T00:00:00Z</published>
    <updated>2012-12-22T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv="Refresh" content="0; url=/blog/2012/12/22/this-week-in-ember-js-3" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;/body&gt;
&lt;/html&gt;
</summary>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv="Refresh" content="0; url=/blog/2012/12/22/this-week-in-ember-js-3" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;/body&gt;
&lt;/html&gt;
</content>
  </entry>
  <entry>
    <title>This Week in Ember.js</title>
    <link rel="alternate" href="/blog/2012/12/22/this-week-in-ember-js-3"/>
    <id>/blog/2012/12/22/this-week-in-ember-js-3</id>
    <published>2012-12-22T00:00:00Z</published>
    <updated>2012-12-22T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Only a few more days left, I hope everyone&amp;#39;s had a great 2012,
while you get ready for the New Year, here&amp;#39;s what&amp;#39;s been happening in Ember.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Only a few more days left, I hope everyone&amp;#39;s had a great 2012,
while you get ready for the New Year, here&amp;#39;s what&amp;#39;s been happening in Ember.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_new-router-api'&gt;New Router API&lt;/h3&gt;
&lt;p&gt;The new router API is has been &lt;a href="https://github.com/emberjs/ember.js/commit/44b23dcf245b0fffdeb29f9f8a5d1bbdc9eb7690"&gt;merged into
master!&lt;/a&gt;
We&amp;#39;ve spent a lot of time incorporating feedback about our first
iteration of the router, and we think you&amp;#39;re going to really love what
we&amp;#39;ve come up with. It makes getting started super simple, and
eliminates the old API that forced you to write unwieldy nested objects.&lt;/p&gt;

&lt;p&gt;There is a &lt;a href="https://gist.github.com/3981133"&gt;short walkthrough&lt;/a&gt; that
describes the thinking behind the new API. Full documentation should be
landing this week.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_embedded-records'&gt;Embedded Records&lt;/h3&gt;
&lt;p&gt;After a massive refactor of the Ember Data library, it now fully
supports embedded records, amongst other goodies.&lt;/p&gt;

&lt;p&gt;As always, check out &lt;a href="https://github.com/emberjs/data/blob/master/BREAKING_CHANGES.md"&gt;BREAKING_CHANGES&lt;/a&gt;
for information about updating your apps.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ds-jsonserializer'&gt;DS.JSONSerializer&lt;/h3&gt;
&lt;p&gt;In the last post we talked about the changes in the serialization API&amp;#39;s renaming methods
to remove the JSON specificity whilst adding hooks to manage relationship dirtiness.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve now fully extracted all the JSON semantics from &lt;code&gt;DS.Serializer&lt;/code&gt; into it&amp;#39;s own class.
The &lt;code&gt;DS.JSONSerializer&lt;/code&gt; is a subclass of &lt;code&gt;DS.Serializer&lt;/code&gt; which implements
the JSON-specific semantics. The &lt;code&gt;RESTAdapter&lt;/code&gt; now uses the &lt;code&gt;JSONSerializer&lt;/code&gt; by
default so if you are using that there is no need to change anything in your application.&lt;/p&gt;

&lt;p&gt;After some feedback we&amp;#39;ve also renamed &lt;code&gt;toData/fromData&lt;/code&gt; to &lt;code&gt;serialize/deserialize&lt;/code&gt;
for a more friendly API.&lt;/p&gt;

&lt;p&gt;As always, check out &lt;a href="https://github.com/emberjs/data/blob/master/BREAKING_CHANGES.md"&gt;BREAKING_CHANGES&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_bound-handlebars-helpers'&gt;Bound handlebars helpers&lt;/h3&gt;
&lt;p&gt;Ember.Handlebars just got a little bit smarter. &lt;code&gt;Ember.Handlebars.registerBoundHelper&lt;/code&gt;
provides a way to easily create your own bound custom helpers.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_example'&gt;Example:&lt;/h4&gt;&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;  Ember.Handlebars.registerBoundHelper(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;capitalize&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(value) {
    &lt;span class="keyword"&gt;return&lt;/span&gt; value.toUpperCase();
  });
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;which can be used in your templates as follows:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;capitalize&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_ember-object-create-behavior-change'&gt;Ember.Object.create behavior change&lt;/h3&gt;
&lt;p&gt;The new behavior will call computed property setters instead of overwriting them.&lt;br&gt;
We suggest using &lt;code&gt;Ember.Object.extend()&lt;/code&gt; to create classes and use &lt;code&gt;create&lt;/code&gt; to initialize
properties on your instance. The old behavior is available via &lt;code&gt;createWithMixins&lt;/code&gt;.&lt;br&gt;
This change should increase object creation performance by 2x.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_other-changes-of-note'&gt;Other changes of note&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;reject&lt;/code&gt; and &lt;code&gt;rejectProperty&lt;/code&gt; methods have been added to &lt;code&gt;Ember.Enumerable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ember.none&lt;/code&gt; and &lt;code&gt;Ember.empty&lt;/code&gt; have been renamed to &lt;code&gt;Ember.isEmpty&lt;/code&gt; and &lt;code&gt;Ember.isNone&lt;/code&gt;
to keep with the Ember Boolean naming convention.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_embercamp'&gt;EmberCamp&lt;/h3&gt;
&lt;p&gt;The very first Ember Camp in SF is happening on the 15th February 2013.
&lt;a href="https://tito.io/tilde/ember-camp-2013"&gt;Sign up here&lt;/a&gt;, be quick, tickets are limited.&lt;/p&gt;

&lt;p&gt;Looking to learn Ember? There&amp;#39;s also an &lt;a href="http://www.embertraining.com/"&gt;Introduction to Ember&lt;/a&gt;
event in the week leading up to Ember Camp.&lt;/p&gt;

&lt;p&gt;Enjoy your holiday,&lt;br&gt;
Bradley Priest&lt;br&gt;
&lt;a href="https://twitter.com/bradleypriest"&gt;@bradleypriest&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
