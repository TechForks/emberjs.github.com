<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2013-10-25T00:00:00Z</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title>Ember 1.1.2 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2013/10/25/ember-1-1-2-released.html"/>
    <id>http://emberjs.com/blog/2013/10/25/ember-1-1-2-released.html</id>
    <published>2013-10-25T00:00:00Z</published>
    <updated>2013-10-25T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Unfortunately, there was a second regression in 1.1 that didn't get
caught in time to make it into 1.1.1. On that account 1.1.2 is out now
to correct that issue. For more information about the problem see
&lt;a href="https://github.com/emberjs/ember.js/issues/3637"&gt;Issue #3637&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We recommend that everyone using...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Unfortunately, there was a second regression in 1.1 that didn&amp;#39;t get
caught in time to make it into 1.1.1. On that account 1.1.2 is out now
to correct that issue. For more information about the problem see
&lt;a href="https://github.com/emberjs/ember.js/issues/3637"&gt;Issue #3637&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We recommend that everyone using 1.1.0 and 1.1.1 upgrade at their
nearest convenience. Head on over to &lt;a href="/builds"&gt;emberjs.com/builds&lt;/a&gt;
to download. Our apologies for the inconvenience.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-1-2-beta-2'&gt;Ember 1.2 Beta 2&lt;/h3&gt;
&lt;p&gt;While we were at it, we also released the second 1.2 beta which includes
a couple of bug fixes. 1.2.0-beta.2 is also available at
&lt;a href="/builds"&gt;emberjs.com/builds&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember 1.1.1 and 1.2 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2013/10/24/ember-1-1-1-and-ember-1-2-0-beta-released.html"/>
    <id>http://emberjs.com/blog/2013/10/24/ember-1-1-1-and-ember-1-2-0-beta-released.html</id>
    <published>2013-10-24T00:00:00Z</published>
    <updated>2013-10-24T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Hot off the heels of our 1.0 release, we've got two new bundles of
goodness for you to try out today.&lt;/p&gt;

&lt;p&gt;First up is Ember.js 1.1.1, the inaugural stable release after our
&lt;a href="/blog/2013/09/06/new-ember-release-process.html"&gt;switch to a Chrome-like six week release
cycle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because this is the kickoff release...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Hot off the heels of our 1.0 release, we&amp;#39;ve got two new bundles of
goodness for you to try out today.&lt;/p&gt;

&lt;p&gt;First up is Ember.js 1.1.1, the inaugural stable release after our
&lt;a href="/blog/2013/09/06/new-ember-release-process.html"&gt;switch to a Chrome-like six week release
cycle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because this is the kickoff release of the new process, there are very
few new features and the delta between 1.0 and 1.1.1 is very small. This
release is composed primarily of bug fixes and performance improvements,
so we recommend you upgrade right away.&lt;/p&gt;

&lt;p&gt;For a list of exactly what&amp;#39;s new, see the &lt;a href="https://github.com/emberjs/ember.js/blob/v1.1.1/CHANGELOG"&gt;CHANGELOG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(If you&amp;#39;re wondering why 1.1.1 and not 1.1, there was &lt;a href="https://github.com/emberjs/ember.js/issues/3596"&gt;a regression
introduced in Ember.Object.create() that could break 1.0-compatible
apps&lt;/a&gt; that we didn&amp;#39;t
notice until after we&amp;#39;d tagged the 1.1 release.)&lt;/p&gt;

&lt;p&gt;To coincide with the stable release, we&amp;#39;ve also got a new beta release
of Ember 1.2. Beta releases are intended to get more eyeballs on new
features that look ready to go, but may have bugs or edge cases that we
haven&amp;#39;t yet sussed out.&lt;/p&gt;

&lt;p&gt;The only changes between a beta release and the stable version should be
bug fixes and removing features that originally looked ready but didn&amp;#39;t
end up making the cut.&lt;/p&gt;

&lt;p&gt;For a full list of the new features in Ember 1.2 beta, see the &lt;a href="https://github.com/emberjs/ember.js/blob/v1.2.0-beta.1/CHANGELOG"&gt;CHANGELOG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, Ember 1.1 and 1.2 beta are available at
&lt;a href="/builds"&gt;emberjs.com/builds&lt;/a&gt;. If you&amp;#39;re feeling particularly
adventurous, you can also grab a Canary build to see what we&amp;#39;re in the
middle of working on, though do note that all new APIs in Canary are
subject to change. To see what features are available to be enabled, see
&lt;a href="https://github.com/emberjs/ember.js/blob/master/FEATURES.md"&gt;FEATURES.md&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re excited about kicking off the new release process because we think
that it will allow us to deliver a higher-quality product more
frequently. We also believe that using feature flags in our Canary
builds will allow us to more easily experiment with new APIs, which
translates to more features faster.&lt;/p&gt;

&lt;p&gt;As always, if you find bugs or need help, please &lt;a href="https://github.com/emberjs/ember.js/issues"&gt;file an issue on
GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, my sincere thanks to everyone who has contributed features, bug
reports and bug fixes to this release.&lt;/p&gt;

&lt;p&gt;In particular, I&amp;#39;d like to call out &lt;a href="https://twitter.com/rwjblue"&gt;Robert Jackson
(@rwjblue)&lt;/a&gt; and &lt;a href="https://twitter.com/thomasABoyt"&gt;Thomas Boyt
(@thomasABoyt)&lt;/a&gt; for their superheroic
efforts on the infrastructure required to make this type of release
process work smoothly.&lt;/p&gt;

&lt;p&gt;Early on, Yehuda and I made a bet that investing in making Ember.js a
community project would pay dividends. We&amp;#39;ve sometimes questioned that
decision when going up against better-funded competitors, but this
release, I think, vindicates our decision.&lt;/p&gt;

&lt;p&gt;This is &lt;a href="https://github.com/emberjs/ember.js/pulse/monthly"&gt;a truly community-driven release&lt;/a&gt;, and both Yehuda and I were
hands-off through most of it. I am deeply grateful to everyone who
sacrificed hours of their nights and weekends to help us build something
that matters.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;d like to be a part of it, we have a welcoming and helpful
community, and we&amp;#39;d love to have you join. Come see us in #emberjs on
Freenode to ask questions and get involved.&lt;/p&gt;

&lt;p&gt;Enjoy the new releases, and go forth and build great things!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Post-1.0 Release Cycle</title>
    <link rel="alternate" href="http://emberjs.com/blog/2013/09/06/new-ember-release-process.html"/>
    <id>http://emberjs.com/blog/2013/09/06/new-ember-release-process.html</id>
    <published>2013-09-06T00:00:00Z</published>
    <updated>2013-09-06T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Now that we&amp;#39;ve shipped Ember 1.0 final, it&amp;#39;s time to look forward to future 
releases.&lt;/p&gt;

&lt;p&gt;The plan moving forward is to adopt a Chrome-like release cycle: more frequent releases with more clarity about where features are in the pipeline.&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;Now that we&amp;#39;ve shipped Ember 1.0 final, it&amp;#39;s time to look forward to future 
releases.&lt;/p&gt;

&lt;p&gt;The plan moving forward is to adopt a Chrome-like release cycle: more frequent releases with more clarity about where features are in the pipeline.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_tl-dr'&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;The Ember.js 1.x Schedule:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Every six weeks: A new stable version of Ember.js.&lt;/li&gt;
&lt;li&gt;Every week: A new beta of the next version of Ember.js. When
Ember 1.1 is released, the first beta of Ember 1.2 will be released
at the same time.&lt;/li&gt;
&lt;li&gt;Every day: A new &amp;quot;canary&amp;quot; build, which is the last successful build of
the day.&lt;/li&gt;
&lt;li&gt;Every successful build: The &lt;code&gt;ember-latest.js&lt;/code&gt; build is updated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All builds will be available on the new &lt;a href="http://emberjs.com/builds/"&gt;Ember.js Builds&lt;/a&gt; section of the
Ember website.&lt;/p&gt;

&lt;p&gt;All new features will start out on master, behind a feature flag. Canary
and &lt;code&gt;latest&lt;/code&gt; builds will ship with all experimental features, enable-able
at runtime.&lt;/p&gt;

&lt;p&gt;Beta and Stable releases will only ship with features that the core team
believes are stable.&lt;/p&gt;

&lt;p&gt;Read on for more details about how we plan to organize new features. If
you plan to contribute features to Ember.js, or are just interested in
the full nitty-gritty, you should check out the &lt;a href="/guides/contributing/adding-new-features"&gt;Adding New
Features&lt;/a&gt; guide, which lays
out all of the mechanics for the process going forward.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_feature-flags'&gt;Feature Flags&lt;/h3&gt;
&lt;p&gt;Starting today, all new features on master that introduce new public APIs
will be wrapped in a feature flag. This will make it very easy for the core
team and the community to see which features are in development and how far
along they are.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;if&lt;/span&gt; (Ember.FEATURES.isEnabled(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;link-to&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)) {
  &lt;span class="comment"&gt;// implementation here&lt;/span&gt;
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_cross-browser-builds'&gt;Cross Browser Builds&lt;/h3&gt;
&lt;p&gt;Moving forward, builds will be tested (via Travis and SauceLabs) against
every supported browser. This means that we&amp;#39;ll know whether a commit broke
the build on any browser we support.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-latest'&gt;Ember Latest&lt;/h3&gt;
&lt;p&gt;Every time the build passes across all browsers, the &lt;code&gt;ember-latest&lt;/code&gt; build
will be updated. This is the most bleeding of bleeding-edge builds.&lt;/p&gt;

&lt;p&gt;You can get all of the latest builds at http://emberjs.com/builds/#/canary/latest.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_canary-builds'&gt;Canary Builds&lt;/h3&gt;
&lt;p&gt;At the end of every day, &lt;code&gt;ember-latest&lt;/code&gt; will be saved off to a canary build
for that day. That means that the last successful build of a given day will
be saved for posterity.&lt;/p&gt;

&lt;p&gt;This is a bleeding-edge build with no manual testing applied, so use at
your own peril.&lt;/p&gt;

&lt;p&gt;On the latest or canary builds, you can enable any experimental feature
using a flag:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Ember.FEATURES[&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;link-to&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;] = &lt;span class="predefined-constant"&gt;true&lt;/span&gt;;
Ember.FEATURES[&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;router-facelift&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;] = &lt;span class="predefined-constant"&gt;true&lt;/span&gt;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This means that latest and canary ship with all experimental features,
and will be bigger in byte-size than using beta or released builds.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_beta-builds'&gt;Beta Builds&lt;/h3&gt;
&lt;p&gt;Every six weeks, we will:&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_branch-beta-to-release'&gt;Branch Beta to Release&lt;/h4&gt;
&lt;p&gt;See more on the release branch below.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_branch-master-to-beta'&gt;Branch Master to Beta&lt;/h4&gt;
&lt;p&gt;First, the core team will review all feature flags on &lt;code&gt;master&lt;/code&gt;, and make
a Go/No-Go decision for each of them.&lt;/p&gt;

&lt;p&gt;Any feature that is not ready to go will be stripped from the beta build.&lt;/p&gt;

&lt;p&gt;Feature development will continue on master, and get another shot at the
next departing train, six weeks hence.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_the-beta-branch'&gt;The Beta Branch&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;beta&lt;/code&gt; branch is designed to get more eyeballs on new features that
look ready to go.&lt;/p&gt;

&lt;p&gt;The only changes to the &lt;code&gt;beta&lt;/code&gt; branch should be bug fixes and removing
features that looked ready originally but which aren&amp;#39;t going to make the
cut for the next stable build.&lt;/p&gt;

&lt;p&gt;You can get the latest successful build off of the beta branch at
http://emberjs.com/builds/#/beta/latest.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_release-build'&gt;Release Build&lt;/h3&gt;
&lt;p&gt;Once the &lt;code&gt;beta&lt;/code&gt; branch has gone through its paces, there will be another
Go/No-Go decision for each new feature still remaining on the branch.&lt;/p&gt;

&lt;p&gt;This decision is made every six weeks, and the features that make the cut
will end up in the next release of Ember.js!&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_new-release-management-team'&gt;New Release Management Team&lt;/h3&gt;
&lt;p&gt;A number of Ember contributors have really stepped up to automate the
process and build out tooling: Stanley Stuart (fivetanley), Robert
Jackson (rwjblue), Alex Navasardyan (twokul) and Thomas Boyt (tboyt).&lt;/p&gt;

&lt;p&gt;They are now the (drumroll please) Ember.js release management team!&lt;/p&gt;

&lt;p&gt;Thanks for all your hard work in making the new release process
possible.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data 1.0.0 Beta 2 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2013/09/04/ember-data-1-0-beta-2-released.html"/>
    <id>http://emberjs.com/blog/2013/09/04/ember-data-1-0-beta-2-released.html</id>
    <published>2013-09-04T00:00:00Z</published>
    <updated>2013-09-04T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href="http://emberjs.com/builds/#/beta/latest"&gt;Ember Data 1.0.0-beta.2&lt;/a&gt; has been released.&lt;/p&gt;

&lt;p&gt;The release fixes a number of bugs, and adds several new features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix a number of issues where the code still expected class names
(&lt;code&gt;App.Post&lt;/code&gt;) instead of module-friendly shorthand (&lt;code&gt;post&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;namespace&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    <content type="html">&lt;p&gt;&lt;a href="http://emberjs.com/builds/#/beta/latest"&gt;Ember Data 1.0.0-beta.2&lt;/a&gt; has been released.&lt;/p&gt;

&lt;p&gt;The release fixes a number of bugs, and adds several new features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix a number of issues where the code still expected class names
(&lt;code&gt;App.Post&lt;/code&gt;) instead of module-friendly shorthand (&lt;code&gt;post&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;namespace&lt;/code&gt; in the &lt;code&gt;RESTAdapter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;record.rollback()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add support for &lt;code&gt;since&lt;/code&gt; token from find all fetches&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;store.update(type, hash)&lt;/code&gt; to update some, but not all attributes&lt;/li&gt;
&lt;li&gt;Improve subclassability of &lt;code&gt;RESTSerializer&lt;/code&gt; and &lt;code&gt;RESTAdapter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to Paul Chavard, Toran Billups, Bradley Priest, Kasper Tidemann, Yann Mainier,
Dali Zheng, Jeremy Green, Robert Jackson, Joe Bartels, Alexandre de Oliveria,
Floren Jaby, Gordon Hempton, Ivan Vanderbyl, Johannel Würbach, Márcio Júnior,
Nick Ragaz, Ricardo Mendes, Ryunosuke SATO, Sylvain Mina, and ssured&lt;/p&gt;

&lt;p&gt;Thanks to everyone who has been porting adapters to Ember Data 1.0!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember 1.0 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2013/08/31/ember-1-0-released.html"/>
    <id>http://emberjs.com/blog/2013/08/31/ember-1-0-released.html</id>
    <published>2013-08-31T00:00:00Z</published>
    <updated>2013-08-31T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Today, we're excited to announce the final release of Ember.js 1.0.&lt;/p&gt;

&lt;p&gt;The first commit to the repository that would become Ember.js happened on April
30th, 2011, almost two and a half years ago.&lt;/p&gt;

&lt;p&gt;At the time, Backbone.js was rocketing to popularity...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Today, we&amp;#39;re excited to announce the final release of Ember.js 1.0.&lt;/p&gt;

&lt;p&gt;The first commit to the repository that would become Ember.js happened on April
30th, 2011, almost two and a half years ago.&lt;/p&gt;

&lt;p&gt;At the time, Backbone.js was rocketing to popularity. In response to large
JavaScript frameworks like SproutCore, Cappuccino, and Dojo, which tried to
abstract away HTML, most web developers began rejecting any solution whose
source code they couldn&amp;#39;t read over in an afternoon. The &amp;quot;microlibrary&amp;quot; frenzy
had hit full tilt.&lt;/p&gt;

&lt;p&gt;However, we knew that as web browsers became more and more powerful, these
simplistic abstractions wouldn&amp;#39;t scale up to the kind of apps that users would
begin to demand.&lt;/p&gt;

&lt;p&gt;We realized that helping developers grapple with the complexity of building
100% JavaScript web applications could only happen if we embraced the tools
that they were most comfortable with: HTML and CSS.&lt;/p&gt;

&lt;p&gt;Based on the current popularity of frameworks like Ember, Angular and Knockout,
it&amp;#39;s clear that this strategy turned out to be the right one.&lt;/p&gt;

&lt;p&gt;As we began work on Ember.js, however, we soon realized that there was a
fundamental problem. Just having templates that were bound to models was
not enough. We also needed to help developers decide &lt;em&gt;which&lt;/em&gt; templates and
models to display at any given time.&lt;/p&gt;

&lt;p&gt;While struggling to figure out the best solution, we couldn&amp;#39;t help but notice
that many JavaScript applications on the web felt broken. Basic things that
we had taken for granted for two decades all of a sudden stopped working.
Just clicking the browser&amp;#39;s back button was enough to break many of these apps.&lt;/p&gt;

&lt;p&gt;We realized that the solution to our problem had been sitting under our noses
all along: the URL is what web applications use to decide what to display!&lt;/p&gt;

&lt;p&gt;We knew that we had to go back to the drawing board. We rebooted the entire
project mid-course to refocus on how to build JavaScript apps that not only
helped you architect large, multi-page applications, but helped you to do so
without breaking the basic building blocks of the web.&lt;/p&gt;

&lt;p&gt;Over time, we&amp;#39;ve added even more features, like components, that help bring
solid UI architecture to the web. We are incredibly proud of the job that
the community has done to lay a solid foundation that we can build upon for the
years to come.&lt;/p&gt;

&lt;p&gt;This 1.0 release is a promise from us: the pain that many experienced while we
were figuring out how to build a JavaScript framework for the future of the web
is now over. In keeping with the Semantic Versioning spec, there will be no
more intentional breaking changes until we release Ember 2.0, which we don&amp;#39;t
anticipate happening for some time.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_recent-developments'&gt;Recent Developments&lt;/h2&gt;&lt;h3 class='anchorable-toc' id='toc_router-facelift'&gt;Router Facelift&lt;/h3&gt;
&lt;p&gt;Over the past few months, Alex Matchneer has taken the Ember router to the next
level. Alex&amp;#39;s changes focus on making the router an excellent tool for managing
complex asynchronous flows (like authentication), and you can learn all about it
in his recently completed guides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/guides/routing/asynchronous-routing/"&gt;Asynchronous Routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/guides/routing/preventing-and-retrying-transitions/"&gt;Preventing and Retrying Transitions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class='anchorable-toc' id='toc_preparation-for-modules'&gt;Preparation for Modules&lt;/h3&gt;
&lt;p&gt;In the years since we started Ember, the JavaScript module ecosystem has become
increasingly mature.&lt;/p&gt;

&lt;p&gt;Today, tools like &lt;a href="http://requirejs.org/"&gt;require.js&lt;/a&gt; and module systems like &lt;a href="https://github.com/amdjs/amdjs-api/wiki/AMD"&gt;AMD&lt;/a&gt;, &lt;a href="http://nodejs.org/api/modules.html"&gt;Node&lt;/a&gt;,
and &lt;a href="https://github.com/square/es6-module-transpiler"&gt;ES6 Modules&lt;/a&gt; continue to gain traction. Increasingly, people are using
named modules and module loaders rather than storing their code in globals.&lt;/p&gt;

&lt;p&gt;To prepare for this future, all of the code lookup and naming conventions in
Ember.js now go through a single &lt;code&gt;Resolver&lt;/code&gt;. The default &lt;code&gt;Resolver&lt;/code&gt; still looks
for code under global namespaces, but &lt;a href="https://github.com/stefanpenner/ember-app-kit/blob/master/vendor/loader.js#L41-L136"&gt;Ember App Kit&lt;/a&gt; already provides an
alternative resolver that looks for code in AMD modules.&lt;/p&gt;

&lt;p&gt;In the near future, we plan to roll in first-class support for modules into the
framework, based on the experiences of users of the increasingly popular Ember
App Kit.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-testing'&gt;Ember Testing&lt;/h3&gt;
&lt;p&gt;The Ember community has always been passionate about testing. Even at the earliest
meetups, testing was one of the most frequently asked-about topics, and testing
featured prominently in our thinking as we built out the new router.&lt;/p&gt;

&lt;p&gt;As we got closer to Ember 1.0, we realized that we needed to provide an official
set of testing-framework agnostic testing helpers. The Ember Testing
package is the start of a longer-term focus on testing facilities that we plan
to improve even more in the 1.x timeframe.&lt;/p&gt;

&lt;p&gt;You can see some of our thoughts for future improvements on the &lt;a href="http://discuss.emberjs.com/t/ember-testing-improvements/1652"&gt;Ember
Discussion Forum&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-inspector-for-chrome'&gt;Ember Inspector for Chrome&lt;/h3&gt;
&lt;p&gt;Teddy Zeenny&amp;#39;s relentless work on the Ember Inspector has been some of the most
awe-inspiring work we&amp;#39;ve seen in open source.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi"&gt;Ember Inspector&lt;/a&gt; that ships with Ember 1.0 makes it easy to see how an
Ember application is laid out, and presents all of the naming conventions in an easy-to-read table.
If you&amp;#39;re using Ember Data, it also lets you see all of the records that your application has loaded at
a glance.&lt;/p&gt;

&lt;p&gt;Coming up next is asynchronous debugging to help make sense of some of the more
quirky behavior of Promises.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://lh6.googleusercontent.com/TGLbr4UoyLqBNvZACqghquEMo5bVWWrlA8f_UkCf4F5etIcqNM0HcBLVRRCQHHLWwBilJbznxrk=s1280-h800-e365-rw"&gt;&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_performance-performance-performance'&gt;Performance, Performance, Performance&lt;/h3&gt;
&lt;p&gt;A number of community members, especially Kris Selden, Erik Bryn and Robin Ward
have done heroic work lately on performance.&lt;/p&gt;

&lt;p&gt;Over the years, Ember&amp;#39;s internals have been significantly sped up time and
time again, and we will continue to hone the performance of Ember going forward.&lt;/p&gt;

&lt;p&gt;In the 1.x timeframe, we have a number of ideas that should significantly
improve rendering performance and decrease the amount of GC during rendering,
so keep an eye out!&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_docs-docs-docs'&gt;Docs, Docs, Docs&lt;/h3&gt;
&lt;p&gt;The early lack of good documentation for Ember seriously pained us, as we&amp;#39;re all
big believers in the idea that user confusion should be considered a bug in the
framework.&lt;/p&gt;

&lt;p&gt;Over the past year, we&amp;#39;ve significantly improved both the &lt;a href="http://emberjs.com/api"&gt;API documentation&lt;/a&gt;
and the &lt;a href="http://emberjs.com/guides"&gt;Guides&lt;/a&gt;. Trek Glowacki has led up the effort, which has resulted in
comprehensive coverage of how to use Ember, an excellent, up-to-date Getting
Started Guide, and most recently, a Cookbook section for common scenarios.&lt;/p&gt;

&lt;p&gt;For Ember 1.0, Trek led a documentation audit of all of the API documentation in
the entire codebase, which led to 1,700 new lines of documentation, and an
across-the-board freshening for new idioms and best practices.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-data-1-0-beta-1'&gt;Ember Data 1.0 Beta 1&lt;/h3&gt;
&lt;p&gt;With the release of Ember 1.0, we&amp;#39;re glad to also release the first beta of
Ember Data 1.0.&lt;/p&gt;

&lt;p&gt;Ember Data 1.0 is a reboot of our data layer. The focus of the effort (codenamed
&lt;code&gt;jj-abrams&lt;/code&gt;, famous for franchise reboots) was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A more flexible codebase, able to handle streaming, custom JSON, and edits
while saving with ease. If you&amp;#39;ve found Ember Data too inflexible for your
backend in the past, try it again!&lt;/li&gt;
&lt;li&gt;Asynchronous operations are now all backed by promises. This will integrate
better with Ember&amp;#39;s own asynchronous handling, and make it easier to combine
and pipeline asynchronous operations like &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Better support for modules. Ember.js itself now has good support for modules,
through Ember App Kit&amp;#39;s drop-in resolver, but Ember Data&amp;#39;s reliance on global
lookups (through &lt;code&gt;App.Post.find&lt;/code&gt;, etc.) made Ember Data hard to use with
modules. The Ember Data 1.0 API is much more friendly to modules, and
therefore the future of Ember.js and the web platform.&lt;/li&gt;
&lt;li&gt;Much better documentation of Ember Data&amp;#39;s APIs, including the adapter and
serializer APIs. Flexible APIs are no good if it&amp;#39;s impossible to learn about
them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;#39;re a current user of Ember Data, you may want to check out the
&lt;a href="https://github.com/emberjs/data/blob/master/TRANSITION.md"&gt;Transition Guide&lt;/a&gt;. If you have issues upgrading that aren&amp;#39;t covered in the
guide, please let us know right away so we can improve it.&lt;/p&gt;

&lt;p&gt;Note: If you aren&amp;#39;t ready to upgrade just yet, we&amp;#39;ve released Ember Data 0.14,
which includes a number of useful performance optimization for Ember Data 0.13
but no breaking changes.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_community'&gt;Community&lt;/h2&gt;
&lt;p&gt;The Ember community is amazing.&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I love the Ember community&lt;/p&gt;&amp;mdash; Yehuda Katz (@wycats) &lt;a href="https://twitter.com/wycats/statuses/372760498187427841"&gt;August 28, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;In addition to the insane amount of work that members of the Ember community
have been doing to prepare the Ember 1.0 release, the community has also been
churning out a number of awesome Ember-related projects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/stefanpenner/ember-app-kit"&gt;Ember App Kit&lt;/a&gt;: An effort by a number of members of the Ember community
to work on tooling for Ember that will eventually become the core of official
Ember tools.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rpflorence/ember-tools"&gt;Ember Tools&lt;/a&gt;: Similar work by Ryan Florence, which will be merged into Ember
App Kit as we begin to bring tooling into core.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ember-addons.github.io/bootstrap-for-ember/dist/"&gt;Bootstrap for Ember&lt;/a&gt;: Twitter Bootstrap wrapped in Ember components!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/billysbilling/ember-animated-outlet"&gt;Ember Animated Outlet&lt;/a&gt;: Support for animated &lt;code&gt;{{outlet}}&lt;/code&gt;s and
&lt;code&gt;{{link-to}}&lt;/code&gt; on top of the current Ember by Sebastian Seilund of Billy&amp;#39;s
Billings.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://adminjs.com/"&gt;Admin.js&lt;/a&gt;: An awesome, flexible and configurable admin for your site
written in Ember by Gordon Hempton. You can use it with an Ember app or just
to provide an admin interface for your Rails, Django, PHP, or whatever app!&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberhotseat.com/"&gt;The Ember Hot Seat&lt;/a&gt;: A regular podcast brought to you by DeVaris Brown.
It regularly features members of the Ember Core Team and prominent members of
the Ember community.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/EmberWatch"&gt;EmberWatch&lt;/a&gt;: Philip Poot&amp;#39;s EmberWatch Twitter account and website will
keep you up-to-date on the latest projects and news.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberweekly.com/"&gt;Ember Weekly&lt;/a&gt;: Ember Weekly, curated by the inimitable Owain
Williams, packs all the Ember news that&amp;#39;s fit to print into your inbox
every week.&lt;/li&gt;
&lt;li&gt;And way more projects. Keep an eye out on this blog, or follow us on the
official @emberjs Twitter account. We plan to feature more projects like these
in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;#39;ve also been grateful to be the beneficiary of large amounts of support from
a number of companies over the years.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LivingSocial, which funded much of the original work on Ember Data.&lt;/li&gt;
&lt;li&gt;Yapp, whose employees have been working on Ember (and SproutCore before
Ember) for years, and which has dedicated countless man-hours to making Ember
better.&lt;/li&gt;
&lt;li&gt;Zendesk, an early user and contributor to Ember. Thank you for betting on
Ember as early as you did.&lt;/li&gt;
&lt;li&gt;McGraw-Hill Education Labs, which has been funding Ember work for over a year,
with great patience, resolve and vision.&lt;/li&gt;
&lt;li&gt;Tilde, which employs Tom, Yehuda, Peter and Leah, and which handles much of
the (unseen) administrative work of the project.&lt;/li&gt;
&lt;li&gt;Billy&amp;#39;s Billings, which has given Sebastian Selund time to work on Ember, and
hosted the work on &lt;code&gt;ember-animated-outlet&lt;/code&gt;, which will make its way into a
future version of Ember.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, a number of large open source projects have bet on Ember. These
projects contribute significantly to Ember&amp;#39;s development, and also give Ember
users a place to look at large, real-world projects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt;: A very early Ember adopter. The Ember project makes heavy use of
Travis, so thank you!&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.discourse.org/"&gt;Discourse&lt;/a&gt;: The increasingly popular forum engine that now powers
TalkingPointsMemo and BoingBoing. These guys have contributed heavily to Ember
and its community.&lt;/li&gt;
&lt;li&gt;Balanced: Balanced is an &lt;a href="https://github.com/balanced"&gt;open-source&lt;/a&gt;, &lt;strong&gt;open company&lt;/strong&gt;. They use Ember
for their &lt;a href="https://github.com/balanced/balanced-dashboard"&gt;dashboard&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_undefined-semantics'&gt;Undefined Semantics&lt;/h2&gt;
&lt;p&gt;There are two areas of Ember.js that have semantics that may accidentally work
in some cases today, but are the source of a number of bugs, and which we don&amp;#39;t
plan to support in the future.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_observer-timing'&gt;Observer Timing&lt;/h3&gt;
&lt;p&gt;At present, Ember observers sometimes fire synchronously, but sometimes fire
asynchronously. The only thing your code should rely on is that the observer
will fire &lt;strong&gt;after&lt;/strong&gt; the property it observes has changed.&lt;/p&gt;

&lt;p&gt;We plan to bring all observers into alignment with &lt;a href="http://wiki.ecmascript.org/doku.php?id=harmony:observe"&gt;Object.observe&lt;/a&gt;, a
future JavaScript feature. In the future, observers will &lt;strong&gt;never&lt;/strong&gt; fire
synchronously. If you rely on specific timing, your code may break.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_observing-properties-of-framework-objects'&gt;Observing Properties of Framework Objects&lt;/h3&gt;
&lt;p&gt;In general, you should not observe properties of framework objects defined by
the framework that are not explicitly documented as observable. Some of these
observations may happen to work today, but may not work in the future.&lt;/p&gt;

&lt;p&gt;For example, you should not observe the &lt;code&gt;element&lt;/code&gt; property on an Ember view or
component. Instead, you should use the &lt;code&gt;didInsertElement&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;If you find yourself observing a framework-defined property that is not
documented as observable to work around an issue, &lt;strong&gt;please&lt;/strong&gt; file an issue with
us so we can give you a publicly defined API.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_the-future'&gt;The Future&lt;/h2&gt;
&lt;p&gt;Despite our commitment to stability, we are not resting on our laurels. We have
an aggressive pipeline of new features planned, which we&amp;#39;ll be announcing soon.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re also switching our releases to follow a more Chrome-like model. This means
that you can expect a new release every six weeks. We&amp;#39;ll have more details about
this soon.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_thanks'&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Special thanks to a number of community members who have done heroic work
leading up to Ember 1.0:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Eric Berry, for the new Cookbook section in the guides and examples&lt;/li&gt;
&lt;li&gt;Paul Chavard, for help reviewing Ember Data 1.0 Beta 1&lt;/li&gt;
&lt;li&gt;Domenic Denicola, for putting us on the right path with promises&lt;/li&gt;
&lt;li&gt;Dan Gebhardt, for website infrastructure&lt;/li&gt;
&lt;li&gt;David Hamilton, for the Array Computed feature&lt;/li&gt;
&lt;li&gt;Robert Jackson, for the new emberjs.com/builds&lt;/li&gt;
&lt;li&gt;Julien Knebel, for design work&lt;/li&gt;
&lt;li&gt;Alex Matchneer, for the async router guide&lt;/li&gt;
&lt;li&gt;Luke Melia, for &lt;code&gt;actions&lt;/code&gt; namespacing, last minute bugfix work, and the Ember NYC community&lt;/li&gt;
&lt;li&gt;Alex Navasardyan, for inline examples on the homepage and design work&lt;/li&gt;
&lt;li&gt;Stanley Stuart, for testing infrastructure&lt;/li&gt;
&lt;li&gt;Igor Terzic, for help reviewing Ember Data 1.0 Beta 1&lt;/li&gt;
&lt;li&gt;Teddy Zeenny, for the Ember Inspector&lt;/li&gt;
&lt;li&gt;The 300 people who submitted code and documentation to Ember 1.0&lt;/li&gt;
&lt;li&gt;The 131 people who submitted code and documentation to Ember Data 1.0 Beta 1&lt;/li&gt;
&lt;li&gt;The 269 people who helped with &lt;a href="http://emberjs.com"&gt;emberjs.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go forth and build great things!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember 1.0 RC8 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2013/08/29/ember-1-0-rc8.html"/>
    <id>http://emberjs.com/blog/2013/08/29/ember-1-0-rc8.html</id>
    <published>2013-08-29T00:00:00Z</published>
    <updated>2013-08-29T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;With Ember 1.0 RC8, we have reached the final RC before 1.0 final, which
we hope to release this weekend if all goes well.&lt;/p&gt;

&lt;p&gt;This final release candidate comes with a couple of small breaking
changes that we are making before 1.0 because they should...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;With Ember 1.0 RC8, we have reached the final RC before 1.0 final, which
we hope to release this weekend if all goes well.&lt;/p&gt;

&lt;p&gt;This final release candidate comes with a couple of small breaking
changes that we are making before 1.0 because they should have a small
impact on application code but a large impact on performance.&lt;/p&gt;

&lt;p&gt;We normally would not make changes of this nature this close to the 1.0
final release date. However, the performance improvements were so
dramatic we did not want to wait until Ember.js 2.0 to introduce the
change, and we are serious in our commitment to not breaking the API
post-1.0. This was our last chance to get these changes in before
putting the final stamp on the 1.0.&lt;/p&gt;

&lt;p&gt;Both of the changes are related to observers. If you find yourself
writing code with lots of observers, you may be writing non-idiomatic
code. In general, you should only need to use observers when you are
bridging Ember code to other libraries that do not support bindings or
computed properties.&lt;/p&gt;

&lt;p&gt;For example, if you were writing a component that wrapped a jQuery UI
widget, you might use an observer to watch for changes on the component
and reflect them on to the widget.&lt;/p&gt;

&lt;p&gt;In your application code, however, you should be relying almost entirely
on computed properties.&lt;/p&gt;

&lt;p&gt;If you are having trouble upgrading your application, please join us in
the IRC channel or post on StackOverflow for help.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_declarative-event-listeners'&gt;Declarative Event Listeners&lt;/h4&gt;
&lt;p&gt;There is now a way to declaratively add event listeners to Ember
classes. This is easier than manually setting up the listeners in
&lt;code&gt;init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Instead of:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = DS.Model.extend({
  &lt;span class="function"&gt;init&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;didLoad&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="local-variable"&gt;this&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
      &lt;span class="local-variable"&gt;this&lt;/span&gt;.finishedLoading();
    });
  },

  &lt;span class="function"&gt;finishedLoading&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// do stuff&lt;/span&gt;
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can just do this:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = DS.Model.extend({
  &lt;span class="function"&gt;finishedLoading&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// do stuff&lt;/span&gt;
  }.on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;didLoad&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_array-computed'&gt;Array Computed&lt;/h4&gt;
&lt;p&gt;Thanks to the tremendous work of David Hamilton, there is now a
convenient and robust way to build a computed property based on an array
that will only perform calculations on the updated portion.&lt;/p&gt;

&lt;p&gt;For example, say that you have an array of people, and you want to
create a computed property that returns an Array of their ages.&lt;/p&gt;

&lt;p&gt;Currently, the easiest way to do that is:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="function"&gt;childAges&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;children&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).mapBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;age&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;children.@each.age&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is pretty terse, but it must recalculate the entire array any time
a single element is added or removed. This works OK for small arrays,
but for larger arrays, or when these kinds of computed properties are
chained or doing expensive work, it can add up.&lt;/p&gt;

&lt;p&gt;Enter Array Computed properties:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="key"&gt;childAges&lt;/span&gt;: Ember.computed.mapBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;children&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;age&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can also chain these Array computed properties together:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="key"&gt;childAges&lt;/span&gt;: Ember.computed.mapBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;children&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;age&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;maxChildAge&lt;/span&gt;: Ember.computed.max(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;childAges&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When an element is added or removed, the computation is only done once.
In this example, if a child is added, their age is appended to
&lt;code&gt;childAges&lt;/code&gt;, and if that age is larger than the &lt;code&gt;maxChildAge&lt;/code&gt;, that
property is updated.&lt;/p&gt;

&lt;p&gt;These computed properties are always up to date, efficient, and
completely managed by Ember.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_ember-extension'&gt;Ember Extension&lt;/h4&gt;
&lt;p&gt;After months of testing, and tons of work by Teddy Zeenny, we&amp;#39;re finally
ready to put the Ember Inspector in the Chrome Web Store.&lt;/p&gt;

&lt;p&gt;Most recently, Teddy added support for loaded data. It already has
support for Ember Data, and Ember Model is actively working on adding
support.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/rc8-ember-data.png"&gt;&lt;/p&gt;

&lt;p&gt;Teddy has also significantly improved the object inspector, adding
support for objects to group properties as they wish (e.g. attributes,
has many, belongs to in Ember Data) and editing records in the inspector
itself.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/rc8-editing.png"&gt;&lt;/p&gt;

&lt;p&gt;You can also see a list of all routes in your app, along with the naming
you should use for associated objects. This should make remembering the
naming conventions a lot easier.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/rc8-routes.png"&gt;&lt;/p&gt;

&lt;p&gt;And finally, a view tree that shows an overlay in your app with the
associated controller and model for your application&amp;#39;s templates.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/rc8-view-tree.png"&gt;&lt;/p&gt;

&lt;p&gt;It should be in the web store in the next day or so, so keep an eye out.
Follow @emberjs on Twitter to get the latest!&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_release-cycle'&gt;Release Cycle&lt;/h4&gt;
&lt;p&gt;We know that the Ember 1.0 RC cycle was a &lt;strong&gt;bit&lt;/strong&gt; long. In truth, we
released RC1 too early. We&amp;#39;re sorry if the release names caused
confusion.&lt;/p&gt;

&lt;p&gt;Going forward, we plan to seriously tighten up our release process. We
will have a blog post outlining the new process together with the final
Ember 1.0 release.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_other-improvements'&gt;Other Improvements&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Several improvements to &lt;code&gt;yield&lt;/code&gt; to make sure it always yields back to
the calling context [@kselden]&lt;/li&gt;
&lt;li&gt;Performance improvement to range updates by not using the W3C range
API even if it&amp;#39;s available [@eviltrout]&lt;/li&gt;
&lt;li&gt;Completion of the 1.0 documentation audit [@trek]&lt;/li&gt;
&lt;li&gt;Better error message if you try to use the same template name multiple
times by using &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags [@locks]&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;currentRouteName&lt;/code&gt; to &lt;code&gt;ApplicationController&lt;/code&gt;, which you can use
in &lt;code&gt;link-to&lt;/code&gt;, &lt;code&gt;transitionTo&lt;/code&gt;, etc. [@machty]&lt;/li&gt;
&lt;li&gt;Alias &lt;code&gt;linkTo&lt;/code&gt; to &lt;code&gt;link-to&lt;/code&gt; and &lt;code&gt;bindAttr&lt;/code&gt; to &lt;code&gt;bind-attr&lt;/code&gt; for
consistency with HTML naming. Old names remain but are soft-deprecated
[@ebryn]&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_changes-tl-dr'&gt;Changes TL;DR&lt;/h4&gt;&lt;h5 class='anchorable-toc' id='toc_observers-don-t-fire-during-construction'&gt;Observers Don&amp;#39;t Fire During Construction&lt;/h5&gt;
&lt;p&gt;Previously, observers would not fire for properties passed into
&lt;code&gt;create&lt;/code&gt; or specified on the prototype, but they would fire if you &lt;code&gt;set&lt;/code&gt;
a property in &lt;code&gt;init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, observers &lt;strong&gt;never&lt;/strong&gt; fire until after &lt;code&gt;init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you need an observer to fire as part of the initialization process,
you can no longer rely on the side effect of &lt;code&gt;set&lt;/code&gt;. Instead, specify
that the observer should also run after &lt;code&gt;init&lt;/code&gt; by using
&lt;code&gt;.on(&amp;#39;init&amp;#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="function"&gt;init&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;salutation&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Mr/Ms&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
  },

  &lt;span class="function"&gt;salutationDidChange&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// some side effect of salutation changing&lt;/span&gt;
  }.observes(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;salutation&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;init&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h5 class='anchorable-toc' id='toc_unconsumed-computed-properties-do-not-trigger-observers'&gt;Unconsumed Computed Properties Do Not Trigger Observers&lt;/h5&gt;
&lt;p&gt;If you never &lt;code&gt;get&lt;/code&gt; a computed property, its observers will not fire even
if its dependent keys change. You can think of the value changing from
one unknown value to another.&lt;/p&gt;

&lt;p&gt;This doesn&amp;#39;t usually affect application code because computed properties
are almost always observed at the same time as they are fetched. For
example, you get the value of a computed property, put it in DOM (or
draw it with D3), and then observe it so you can update the DOM once the
property changes.&lt;/p&gt;

&lt;p&gt;If you need to observe a computed property but aren&amp;#39;t currently
retrieving it, just &lt;code&gt;get&lt;/code&gt; it in your &lt;code&gt;init&lt;/code&gt; method.&lt;/p&gt;
&lt;h5 class='anchorable-toc' id='toc_new-actions-hash-for-routes-controllers-and-views'&gt;New Actions Hash for Routes, Controllers, and Views&lt;/h5&gt;
&lt;p&gt;Previously, you could define actions for your routes in their &lt;code&gt;events&lt;/code&gt; hash. In controllers and views however, actions were defined directly as methods on the instance. Not only was this inconsistent, it also lead to awkward naming conflicts. For instance, attempting to name your action &lt;code&gt;destroy&lt;/code&gt; would conflict with the built-in &lt;code&gt;destroy&lt;/code&gt; method and very bad things would happen.&lt;/p&gt;

&lt;p&gt;To make things consistent and give more flexibility in action naming, we&amp;#39;ve standardized around using a hash called &lt;code&gt;actions&lt;/code&gt;. When extending a class with &lt;code&gt;actions&lt;/code&gt; defined, we&amp;#39;ll merge the &lt;code&gt;actions&lt;/code&gt; defined on the subclass or instance with those on the parent. We also support &lt;code&gt;_super&lt;/code&gt; so you won&amp;#39;t lose any flexibility with this approach.&lt;/p&gt;

&lt;p&gt;The old behavior will continue to work for the time being but is now deprecated. In the event that you had a controller that was proxying to a model with an existing &lt;code&gt;actions&lt;/code&gt; property, we internally rename the property to &lt;code&gt;_actions&lt;/code&gt; to avoid any conflicts.&lt;/p&gt;
&lt;h5 class='anchorable-toc' id='toc_enforce-quoted-strings-in-handlebars-helpers'&gt;Enforce Quoted Strings in Handlebars Helpers&lt;/h5&gt;
&lt;p&gt;In the past, we were loose with our requirements for quoting strings in Handlebars helpers. Unfortunately, this meant we were unable to distinguish between string values and property paths. We are now strictly enforcing quoting if you want the value to be treated as a string. This means that for &lt;code&gt;link-to&lt;/code&gt; the route names must be quotes. In the reverse direction, if you had custom bound helpers and were passing a property path as a quoted string, this will no longer work. Again, quotes for strings, no quotes for paths.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_setting-properties-in-code-init-code'&gt;Setting Properties in &lt;code&gt;init&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Currently, there is an inconsistency between properties set when passing
a hash to &lt;code&gt;create&lt;/code&gt; and setting those same properties in &lt;code&gt;init&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="function"&gt;firstNameDidChange&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// this observer does not fire&lt;/span&gt;
  }.observes(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});

App.Person.create({ &lt;span class="key"&gt;firstName&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Tom&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;lastName&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Dale&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; });
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this case, because the properties were set by passing a hash to
&lt;code&gt;create&lt;/code&gt;, the observers are not fired.&lt;/p&gt;

&lt;p&gt;But let&amp;#39;s look at what happens in RC7 when the same initialization is
done via the &lt;code&gt;init&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// WARNING: OLD BEHAVIOR&lt;/span&gt;

App.Person = Ember.Object.extend({
  &lt;span class="function"&gt;init&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;if&lt;/span&gt; (!&lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)) {
      &lt;span class="local-variable"&gt;this&lt;/span&gt;.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Tom&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
    }
  },
  &lt;span class="function"&gt;firstNameDidChange&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// this observer fires&lt;/span&gt;
  }.observes(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});

App.Person.create({ &lt;span class="key"&gt;lastName&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Dale&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; });
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this case, the old behavior would trigger the observers if
&lt;code&gt;firstName&lt;/code&gt; was not provided.&lt;/p&gt;

&lt;p&gt;We intended the design of the object model to trigger observers only
after construction, which is why &lt;code&gt;create&lt;/code&gt; behaves the way it does.&lt;/p&gt;

&lt;p&gt;Also, because the only way to define initial properties that have arrays
or objects as values is in &lt;code&gt;init&lt;/code&gt;, there is a further inconsistency:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// WARNING: OLD BEHAVIOR&lt;/span&gt;

App.Person = Ember.Object.extend({
  &lt;span class="comment"&gt;// initial property value, does not trigger an initialization observer&lt;/span&gt;
  &lt;span class="key"&gt;salutation&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Mr.&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,

  &lt;span class="function"&gt;init&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// also initial property value, triggers an observer on&lt;/span&gt;
    &lt;span class="comment"&gt;// initialization&lt;/span&gt;
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;children&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, []);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In short, properties that get set during initialization, whether they
were already set on the prototype, passed as a hash to &lt;code&gt;create&lt;/code&gt;, or set
in &lt;code&gt;init&lt;/code&gt;, do not trigger observers.&lt;/p&gt;

&lt;p&gt;If you have some code that you want to run both on initialization and
when a property changes, just mark it as a method that should also run
when initialization is done by using &lt;code&gt;.on(&amp;#39;init&amp;#39;)&lt;/code&gt;. This will also be
more resiliant to refactoring, and not rely on a side effect of an
&lt;code&gt;init&lt;/code&gt;-time &lt;code&gt;set&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="function"&gt;firstNameDidChange&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// some side effect that happens when first name changes&lt;/span&gt;
  }.observes(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;init&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_computed-property-performance-improvements'&gt;Computed Property Performance Improvements&lt;/h4&gt;
&lt;p&gt;The latest release of Ember.js contains a change to the way that observers and
computed properties interact. This may be a breaking change in apps that
relied on the previous behavior.&lt;/p&gt;

&lt;p&gt;To understand the change, let&amp;#39;s first look at an example of a computed
property.  Imagine we are trying to model &lt;a href="http://en.wikipedia.org/wiki/Schr%C3%B6dinger&amp;#x27;s_cat"&gt;Schrödinger&amp;#39;s famous
cat&lt;/a&gt; using an Ember.js
object.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Cat = Ember.Object.extend({
  &lt;span class="function"&gt;isDead&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; Math.rand() &amp;gt; &lt;span class="float"&gt;0.5&lt;/span&gt;;
  }.property()
});

&lt;span class="keyword"&gt;var&lt;/span&gt; cat = App.Cat.create();
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Given this cat object, is it alive or is it dead? Well, that&amp;#39;s determined at random.
Before observing the cat, we might say that it&amp;#39;s &lt;em&gt;both&lt;/em&gt; alive &lt;em&gt;and&lt;/em&gt; dead, or
perhaps neither.&lt;/p&gt;

&lt;p&gt;In reality, whether or not our cat has shuffled off this mortal coil is only
determined the first time we ask for it:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;cat.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;isDead&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// true&lt;/span&gt;
&lt;span class="comment"&gt;// …or false, half the time&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After we have asked the cat object for its &lt;code&gt;isDead&lt;/code&gt; property, we can
categorically say which it is. But before we ask, the value of the
computed property doesn&amp;#39;t really &lt;em&gt;exist&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now, let&amp;#39;s introduce observers into the mix. If the value of a computed
property doesn&amp;#39;t exist yet, should observers fire if one of its
dependent keys changes?&lt;/p&gt;

&lt;p&gt;In previous versions of Ember.js, the answer was &amp;quot;yes.&amp;quot; For example,
given this class:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="key"&gt;observerCount&lt;/span&gt;: &lt;span class="integer"&gt;0&lt;/span&gt;,

  &lt;span class="function"&gt;fullName&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),

  &lt;span class="function"&gt;fullNameDidChange&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.incrementProperty(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;observerCount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.observes(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fullName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Changing any of the dependent keys would trigger the observer:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// WARNING: OLD BEHAVIOR DO NOT RELY ON THIS&lt;/span&gt;

&lt;span class="keyword"&gt;var&lt;/span&gt; person = App.Person.create({
  &lt;span class="key"&gt;firstName&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Yehuda&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;lastName&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Katz&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
});

person.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;observerCount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="comment"&gt;// =&amp;gt; 0&lt;/span&gt;

person.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Tomhuda&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
person.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;observerCount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="comment"&gt;// =&amp;gt; 1&lt;/span&gt;

person.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Katzdale&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
person.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;observerCount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="comment"&gt;// =&amp;gt; 2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;However, because the &lt;code&gt;fullName&lt;/code&gt; property doesn&amp;#39;t really &amp;quot;exist&amp;quot; until
it&amp;#39;s requested, it is unclear if firing an observer is the correct
behavior.&lt;/p&gt;

&lt;p&gt;A related problem affects computed properties if their dependent
keys contain a path. (Remember that dependent keys are just the property
names you pass to &lt;code&gt;.property()&lt;/code&gt; when defining a CP.)&lt;/p&gt;

&lt;p&gt;For example, imagine we are building a model to represent a blog post
that lazily loads the post&amp;#39;s comments if they are used (in a template,
for instance).&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.BlogPost = Ember.Object.extend({
  &lt;span class="function"&gt;comments&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;var&lt;/span&gt; comments = [];
    &lt;span class="keyword"&gt;var&lt;/span&gt; url = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/post/&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/comments.json&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

    &lt;span class="predefined"&gt;$&lt;/span&gt;.getJSON(url).then(&lt;span class="keyword"&gt;function&lt;/span&gt;(data) {
      data.forEach(&lt;span class="keyword"&gt;function&lt;/span&gt;(comment) {
        comments.pushObject(comment);
      });
    });

    &lt;span class="keyword"&gt;return&lt;/span&gt; comments;
  }.property()
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Awesome! This will work as expected—a post&amp;#39;s comments will only be loaded
over the network the first time we do &lt;code&gt;post.get(&amp;#39;comments&amp;#39;)&lt;/code&gt; or use it
in a template:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;comments&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;title&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;However, now we want to add a computed property that selects the first
comment from the array of loaded comments:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.BlogPost = Ember.Object.extend({
  &lt;span class="function"&gt;comments&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;var&lt;/span&gt; comments = [];
    &lt;span class="keyword"&gt;var&lt;/span&gt; url = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/post/&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/comments.json&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

    &lt;span class="predefined"&gt;$&lt;/span&gt;.getJSON(url).then(&lt;span class="keyword"&gt;function&lt;/span&gt;(data) {
      data.forEach(&lt;span class="keyword"&gt;function&lt;/span&gt;(comment) {
        comments.pushObject(comment);
      });
    });

    &lt;span class="keyword"&gt;return&lt;/span&gt; comments;
  }.property(),

  &lt;span class="function"&gt;firstComment&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments.firstObject&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments.firstObject&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we have a problem! Because the &lt;code&gt;firstComment&lt;/code&gt; computed property has
a dependency on &lt;code&gt;comments.firstObject&lt;/code&gt;, it will &lt;code&gt;get()&lt;/code&gt; the &lt;code&gt;comments&lt;/code&gt;
property in order to set up an observer on &lt;code&gt;firstObject&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, just adding this computed property now means that the
comments are loaded for &lt;em&gt;all&lt;/em&gt; blog posts in the app—whether their
comments are ever used or not!&lt;/p&gt;

&lt;p&gt;To determine what to do, we spent some time looking at real-world
Ember.js apps. What we discovered is that &lt;strong&gt;this behavior carried with
it signficant performance penalties.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Firing observers on unmaterialized computed properties means we have
to set up listeners on all computed properties ahead of time, instead
of lazily the first time they are computed.&lt;/li&gt;
&lt;li&gt;Many computed properties that never get used are nonetheless computed
because of path dependent keys.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To fix these issues, &lt;strong&gt;RC8 makes the following changes&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Observers that observe a computed property only fire after that
property has been used at least once.&lt;/li&gt;
&lt;li&gt;Observing a path (&lt;code&gt;&amp;quot;foo.bar.baz&amp;quot;&lt;/code&gt;), or using a path as a dependent key,
will not cause any parts of the path that are uncomputed to become
computed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The majority of Ember.js applications should not be affected by this
change, since:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Most apps that observe computed properties also &lt;code&gt;get()&lt;/code&gt; those
properties at object initialization time, thus triggering the correct
behavior.&lt;/li&gt;
&lt;li&gt;In the case of computed property dependent keys, the new behavior is
what developers were expecting to happen all along.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If your applications are affected by this change, the fix is
straightforward: just &lt;code&gt;get()&lt;/code&gt; the computed property in your class&amp;#39;s
&lt;code&gt;init&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;For example, to update the observer example above, we can retain the
pre-RC8 behavior by &amp;quot;precomputing&amp;quot; the &lt;code&gt;fullName&lt;/code&gt; property:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="function"&gt;init&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fullName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    &lt;span class="local-variable"&gt;this&lt;/span&gt;._super();
  },

  &lt;span class="key"&gt;observerCount&lt;/span&gt;: &lt;span class="integer"&gt;0&lt;/span&gt;,

  &lt;span class="function"&gt;fullName&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),

  &lt;span class="function"&gt;fullNameDidChange&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.incrementProperty(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;observerCount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.observes(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fullName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_code-link-to-code-bound-parameters'&gt;&lt;code&gt;link-to&lt;/code&gt; Bound Parameters&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;link-to&lt;/code&gt; helper (formerly &lt;code&gt;linkTo&lt;/code&gt;, see above) now treats
all unquoted parameters (and non-numeric parameters)
as bound property paths, which means that when a property passed to
&lt;code&gt;link-to&lt;/code&gt; changes, the &lt;code&gt;href&lt;/code&gt; of the link will change. This includes
the first parameter (the destination route name) and any of the context
parameters that follow.&lt;/p&gt;

&lt;p&gt;The following example template will look up the &lt;code&gt;destinationRoute&lt;/code&gt; on the
current context (usually a controller) and use it to determine the
&lt;code&gt;href&lt;/code&gt; of the link and the route that will be transitioned to when
the link is clicked.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;link-to&lt;/span&gt; &lt;span class="attribute-name"&gt;destinationRoute&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;Link Text&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;link-to&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The following example template will always point to the &lt;code&gt;articles.show&lt;/code&gt;
route (since the route name parameter is in quotes), but when the value
of &lt;code&gt;article&lt;/code&gt; changes, the link&amp;#39;s &lt;code&gt;href&lt;/code&gt; will update to the URL that
corresponds to the new value of &lt;code&gt;article&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;link-to&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;articles.show&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="attribute-name"&gt;article&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;Read More...&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;link-to&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This might cause a few surprises in your app if you haven&amp;#39;t been
distinguishing between quoted strings and property paths, so make sure
that any static string &lt;code&gt;link-to&lt;/code&gt; parameters (such as route names) are
properly quoted in your templates when you upgrade to RC8.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_bound-helpers-quoted-strings-numbers-and-paths'&gt;Bound Helpers: Quoted Strings, Numbers, and Paths&lt;/h4&gt;
&lt;p&gt;Invoking a custom bound helper (e.g. one defined via &lt;code&gt;Ember.Handlebars.helper&lt;/code&gt;)
with quoted strings or raw numbers will pass that raw value directly
into the helper function you&amp;#39;ve defined, rather than treating everything
like a bound property path that will re-render the helper when changed.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Pass the string 'hello' to myHelper:
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;myHelper&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;hello&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;

Pass the property pointed-to by the path 'hello' to myHelper:
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;myHelper&lt;/span&gt; &lt;span class="attribute-name"&gt;hello&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This might cause a few surprises in your app if you&amp;#39;ve been invoking
bound helpers with quoted strings and expecting them to be treated as
bound property paths, so make sure that the only time you&amp;#39;re passing
quoted strings to custom helpers is when you really intend to pass raw
strings (rather than the values of properties) to the helper.&lt;/p&gt;
</content>
  </entry>
</feed>
