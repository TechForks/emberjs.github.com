<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2013-03-22T00:00:00Z</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title>Stabilizing Ember Data</title>
    <link rel="alternate" href="/blog/2013/03/22/stabilizing-ember-data.html"/>
    <id>/blog/2013/03/22/stabilizing-ember-data.html</id>
    <published>2013-03-22T00:00:00Z</published>
    <updated>2013-03-22T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Yesterday, we gave you an update on our progress making Ember.js easier
to use. One thing we didn&amp;#39;t discuss was our plan for Ember Data.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s no secret that, while many developers are building awesome apps
with Ember.js, Ember Data still causes lots of frustration due to bugs&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Yesterday, we gave you an update on our progress making Ember.js easier
to use. One thing we didn&amp;#39;t discuss was our plan for Ember Data.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s no secret that, while many developers are building awesome apps
with Ember.js, Ember Data still causes lots of frustration due to bugs
and a changing, complex API. Documentation about it is also mixed in
with Ember.js documentation, making it difficult for new developers to
understand what is stable and what is not.&lt;/p&gt;

&lt;p&gt;To be clear, Ember Data is not a dependency of Ember.js.
&lt;a href="https://github.com/discourse/discourse"&gt;Discourse&lt;/a&gt;, for example, uses
its own, simple wrapper around
&lt;a href="https://github.com/discourse/discourse/blob/master/app/assets/javascripts/discourse/models/model.js"&gt;&lt;code&gt;$.ajax&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even though Ember Data is not a dependency of Ember.js, loading data
from the server is an extremely important part of most web applications,
and it&amp;#39;s a problem that every Ember.js application will have to deal
with.&lt;/p&gt;

&lt;p&gt;Our long-term goal is simple: we don&amp;#39;t think most web developers should
have to write any custom XHR code for loading data. Strong conventions
on the client and strong conventions on the server should allow them to
communicate automatically.&lt;/p&gt;

&lt;p&gt;We know we&amp;#39;re not there yet.&lt;/p&gt;

&lt;p&gt;In order for this to work, there are many necessary features that must
be rock-solid across all sorts of different persistence layersâ€”local
storage, relational databases, and key-value stores, to name a few. To
top it off, the asynchronous environment of the browser (with an often
unreliable internet connection) adds significant complexity, and means
we can&amp;#39;t simply port the solutions to these problems that have been
pioneered on the server.&lt;/p&gt;

&lt;p&gt;Getting all of these features working well together is a challenging
problem, and we have not been able to deliver everything we thought we
could in a reasonable amount of time.&lt;/p&gt;

&lt;p&gt;Additionally, many developers are writing web applications that need to
consume an existing JSON API that evolved organically and is not
consistently named or structured. The API we have provided so far is
suboptimal for this task.&lt;/p&gt;

&lt;p&gt;To make the experience of writing an Ember Data application less
frustrating, we&amp;#39;re doing two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We&amp;#39;re identifying a subset of features that already work reliably.&lt;/li&gt;
&lt;li&gt;We&amp;#39;re introducing a new, simpler API for working with remote data
that makes fewer assumptions. You still get to use the model API
in Ember Data, but can &amp;quot;bring your own &lt;code&gt;$.ajax&lt;/code&gt;&amp;quot; to load and store
records.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Right now, what gets documented is somewhat ad-hoc. Going forward, we
will heavily document the stable features. Finding documentation about
an Ember Data feature on the emberjs.com website will be your indication
that we consider it stable and safe to use.&lt;/p&gt;

&lt;p&gt;Over time, after we have put new features through their paces and
written extensive documentation, the set of stable features will grow.
In other words, we are refocusing on a small core of practical features,
which we will slowly iterate towards our long-term, ambitious goal.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_the-basic-adapter'&gt;The Basic Adapter&lt;/h2&gt;
&lt;p&gt;The Ember Data adapter layer, which is responsible for finding and
saving records, is currently designed to make it easy to build reusable
adapters, like the ones people have written for
&lt;a href="https://github.com/clintjhill/ember-parse-adapter"&gt;Parse&lt;/a&gt; or
&lt;a href="https://github.com/pangratz/ember-couchdb-adapter"&gt;CouchDB&lt;/a&gt;. It is not
well-suited for delegating out to &lt;code&gt;$.ajax&lt;/code&gt; to work with an API
that is not 100% consistent.&lt;/p&gt;

&lt;p&gt;To make it easier to use Ember Data with any kind of JSON data, we
are introducing the Basic Adapter, which simply delegates to a &lt;code&gt;sync&lt;/code&gt;
object on your model.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s look at an example of using the Basic Adapter with the Twitter API.&lt;/p&gt;

&lt;p&gt;First, note that the syntax for defining a model hasn&amp;#39;t changed
(historically, this has been one of the most stable parts of Ember
Data):&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; attr = DS.attr, hasMany = DS.hasMany, belongsTo = DS.belongsTo;

App.User = DS.Model.extend({
  &lt;span class="key"&gt;defaultProfileImage&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;boolean&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;description&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;screenName&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;isVerified&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;boolean&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;createdAt&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;date&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),

  &lt;span class="key"&gt;tweets&lt;/span&gt;: hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;App.Tweet&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});

App.Tweet = DS.Model.extend({
  &lt;span class="key"&gt;coordinates&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;point&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;createdAt&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;date&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;isFavorited&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;boolean&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;retweetCount&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;number&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;text&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;isTruncated&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;boolean&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),

  &lt;span class="key"&gt;replyTo&lt;/span&gt;: belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;App.User&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;user&lt;/span&gt;: belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;App.User&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Finding records also hasn&amp;#39;t changed:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// use the Promise API&lt;/span&gt;
App.User.find(userId).then(&lt;span class="keyword"&gt;function&lt;/span&gt;(user) {
  &lt;span class="keyword"&gt;return&lt;/span&gt; user.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;tweets&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
}).then(&lt;span class="keyword"&gt;function&lt;/span&gt;(tweets) {
  &lt;span class="comment"&gt;// do something with `tweets`&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;When you request the &lt;code&gt;User&lt;/code&gt; and then its &lt;code&gt;tweets&lt;/code&gt;, Ember Data will make
calls to your models&amp;#39; &lt;code&gt;sync&lt;/code&gt; object.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.User.sync = {
  &lt;span class="function"&gt;find&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(id, process) {
    &lt;span class="predefined"&gt;$&lt;/span&gt;.getJSON(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/users/show&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;screen_name&lt;/span&gt;: id }).then(&lt;span class="keyword"&gt;function&lt;/span&gt;(user) {        
      process(user)                 
        .primaryKey(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;screen_name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
        .camelizeKeys()
        .applyTransforms(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;twitter&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
        .load();
    });
  },

  &lt;span class="function"&gt;findTweets&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(user, name, process) {
    &lt;span class="keyword"&gt;var&lt;/span&gt; screenName = user.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

    &lt;span class="predefined"&gt;$&lt;/span&gt;.getJSON(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/statuses/user_timeline&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;screen_name&lt;/span&gt;: screenName }).then(&lt;span class="keyword"&gt;function&lt;/span&gt;(timeline) {
      process(timeline)
        .primaryKey(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;id_str&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
        .camelizeKeys()
        .applyTransforms(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;twitter&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
        .munge(&lt;span class="keyword"&gt;function&lt;/span&gt;(json) {
          json.isTruncated = json.truncated;
          json.replyTo = json.inReplyToScreenName;
        })
        .load();
    });
  }
};
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, in each of the hooks on the &lt;code&gt;sync&lt;/code&gt; object, the last
argument passed in is a function called &lt;code&gt;process&lt;/code&gt;. You use this function to
load JSON data returned from the XHR into the store. It also includes
several conveniences for common transformations, like camelizing
property names and transforming values like dates.&lt;/p&gt;

&lt;p&gt;Of course, you are not required to use these conveniences. You can write
whatever imperative code you&amp;#39;d like to transform the JSON returned from
the server into the form that Ember Data is expecting. Here is the above
example re-written without using the chained conveniences.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="function"&gt;findTweets&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(user, name, process) {
  &lt;span class="keyword"&gt;var&lt;/span&gt; screenName = user.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  &lt;span class="predefined"&gt;$&lt;/span&gt;.getJSON(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/statuses/user_timeline&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;screen_name&lt;/span&gt;: screenName }).then(&lt;span class="keyword"&gt;function&lt;/span&gt;(timeline) {
    &lt;span class="keyword"&gt;var&lt;/span&gt; tweets = timeline.map(&lt;span class="keyword"&gt;function&lt;/span&gt;(json) {
      &lt;span class="comment"&gt;// Map primary key&lt;/span&gt;
      json.id = json.id_str;

      &lt;span class="comment"&gt;// Camelize property names&lt;/span&gt;
      &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;var&lt;/span&gt; prop &lt;span class="keyword"&gt;in&lt;/span&gt; json) {
        &lt;span class="keyword"&gt;var&lt;/span&gt; value = json[prop];
        &lt;span class="keyword"&gt;delete&lt;/span&gt; json[prop];
        json[camelize(prop)] = value;
      }

      &lt;span class="comment"&gt;// Convert string-formatted date to object&lt;/span&gt;
      json.createdAt = Date.parse(json.createdAt);

      &lt;span class="comment"&gt;// Convert hash to JavaScript object&lt;/span&gt;
      json.coordinates = &lt;span class="keyword"&gt;new&lt;/span&gt; Twitter.Point(json.coordinates);

      &lt;span class="comment"&gt;// Rename properties&lt;/span&gt;
      json.isTruncated = json.truncated;
      json.replyTo = json.inReplyToScreenName;

      &lt;span class="keyword"&gt;return&lt;/span&gt; json;
    });

    process(tweets).load();
  });
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;h2 class='anchorable-toc' id='toc_timeline'&gt;Timeline&lt;/h2&gt;
&lt;p&gt;We have been working on this new API part-time for the past few weeks.
You can see our progress on Ember Data&amp;#39;s master branch, by looking at
&lt;a href="https://github.com/emberjs/data/tree/master/packages/ember-data/tests/integration/adapters/basic_adapter"&gt;the tests&lt;/a&gt; or &lt;a href="https://github.com/emberjs/data/blob/master/packages/ember-data/lib/adapters/basic_adapter.js"&gt;the implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Over the next few weeks, we will be writing documentation that will be
available in the &lt;a href="http://emberjs.com/guides/"&gt;Ember.js Guides&lt;/a&gt;. Once a
few people have had the opportunity to use the Basic Adapter and
sanity-check our work, we will start cutting beta releases of Ember
Data. We think that this will be a lot easier for new developers than &amp;quot;make
a build from master.&amp;quot;&lt;/p&gt;

&lt;p&gt;Our thanks go out to &lt;a href="http://mcdowall.info"&gt;John McDowall&lt;/a&gt;, who has been
tracking our progress on Basic Adapter and writing documentation to go
with it.&lt;/p&gt;

&lt;p&gt;Finally, we&amp;#39;d like to give a big thanks to
&lt;a href="https://addepar.com/"&gt;Addepar&lt;/a&gt; for financially supporting us
while we do this work. They are big users of and contributors to Ember
Data, and we couldn&amp;#39;t do it without them.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Making Ember.js Easier</title>
    <link rel="alternate" href="/blog/2013/03/21/making-ember-easier.html"/>
    <id>/blog/2013/03/21/making-ember-easier.html</id>
    <published>2013-03-21T00:00:00Z</published>
    <updated>2013-03-21T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We frequently receive feedback from new developers about how frustrating
it can be to get started with Ember. Yesterday, one of the &lt;a href="https://news.ycombinator.com/item?id=5406857"&gt;most active
comment threads on Hacker
News&lt;/a&gt; was largely about just that.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;We frequently receive feedback from new developers about how frustrating
it can be to get started with Ember. Yesterday, one of the &lt;a href="https://news.ycombinator.com/item?id=5406857"&gt;most active
comment threads on Hacker
News&lt;/a&gt; was largely about just that.&lt;/p&gt;

&lt;p&gt;We hear you loud and clear. Ember.js is not easy to get started with, and we take that very seriously. We are all working nights and weekends to make the framework as approachable as humanly possible.&lt;/p&gt;

&lt;p&gt;One of the Hacker News commenters, kanja, nailed it. In response to another commenter who felt like the negative reaction was strong:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It&amp;#39;s incredibly out of proportion - but people really want to use ember (because it promises all these great things!) and they&amp;#39;re frustrated by the docs (because they&amp;#39;re not really good for first time users) so this is kind of a flash point.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Absolutely right. Ember promisesâ€”and, we think, deliversâ€”tremendous value. But ramping up to that point is not easy, and we received this feedback repeatedly and take it very seriously.&lt;/p&gt;

&lt;p&gt;There was another common sentiment that we&amp;#39;d like to address:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I have seen this sort of attitude from quite a few domain experts - if you didn&amp;#39;t get it, you aren&amp;#39;t smart enough and &amp;quot;don&amp;#39;t deserve to be in our group.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That does not reflect our feelings at all. If people find it difficult to use the tools we&amp;#39;ve created, that&amp;#39;s a failure on our part. Period.&lt;/p&gt;

&lt;p&gt;To keep things in perspective, we froze the Ember 1.0 API a mere month ago, when we released the first 1.0 RC. Before that, we were focused on iterating the API based on feedback we received from our early adopters. We believe that our willingness to change the API allowed us to build a better product than our competitors that locked in their first attempts. But that also means that much of the effort that people put into writing tutorials and documentation, including our own, quickly became obsolete.&lt;/p&gt;

&lt;p&gt;Thankfully, that period is over. As we said in our &lt;a href="https://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=RYAD2arvysU#t=229s"&gt;EmberCamp keynote&lt;/a&gt;, our focus now is on stability and building the ecosystem.&lt;/p&gt;

&lt;p&gt;Since EmberCamp, momentum has been incredible. We&amp;#39;ve seen the amount of material helping new users grow quickly.&lt;/p&gt;

&lt;p&gt;To call out a few of the big ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://peepcode.com/products/emberjs"&gt;Fire Up Ember.js PeepCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://railscasts.com/episodes/408-ember-part-1"&gt;Ember RailsCast&lt;/a&gt; (and &lt;a href="http://railscasts.com/episodes/410-ember-part-2"&gt;Part 2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.toranbillups.com/blog/archive/2013/03/02/emberjs-rc1-introduction-screencast/"&gt;RC1 Introduction Screencast&lt;/a&gt; by Toran Billups&lt;/li&gt;
&lt;li&gt;&lt;a href="http://net.tutsplus.com/tutorials/javascript-ajax/getting-into-ember-js/"&gt;NetTuts&amp;#39; Getting into Ember.js series&lt;/a&gt; by Rey Bango&lt;/li&gt;
&lt;li&gt;The guides on the Ember.js website have been dramatically expanded&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, great open source examples built on top of RC1 are out in the wild, like &lt;a href="https://github.com/addyosmani/todomvc/tree/gh-pages/architecture-examples/emberjs"&gt;TodoMVC&lt;/a&gt; and the &amp;quot;Big Kahuna,&amp;quot; &lt;a href="https://github.com/discourse/discourse"&gt;Discourse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve also been working on tooling to make the process of developing Ember.js apps easier. For example, &lt;a href="https://github.com/rpflorence/ember-tools"&gt;Ryan Florence&amp;#39;s ember-tools&lt;/a&gt; significantly improves bootstrapping a new project, and the &lt;a href="https://github.com/tildeio/ember-extension"&gt;Ember Inspector plugin for Chrome&lt;/a&gt; (which we &lt;a href="https://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=RYAD2arvysU#t=1924s"&gt;demoed at EmberCamp&lt;/a&gt;) should make debugging and understanding apps much easier.&lt;/p&gt;

&lt;p&gt;But we know that these things aren&amp;#39;t enough. Here are the specific steps we will be taking to improve the experience for developers getting started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We&amp;#39;re actively working on a Getting Started Guide with live examples that walks the user through building a new application from scratch&lt;/li&gt;
&lt;li&gt;We&amp;#39;re writing the script for a short screencast introducing the framework and illustrating how it works that will be prominently displayed on the homepage.&lt;/li&gt;
&lt;li&gt;We&amp;#39;re continuing to improve our guides to talk through areas, like the naming conventions we use in Ember, that might be confusing for new developers.&lt;/li&gt;
&lt;li&gt;The Starter Kit will return, giving developers a one-click way to try out Ember. (We removed it temporarily to bring it up to date with the most recent idioms, but it will be coming back very soon. This was a hard decision, but leaving around an out of date starter kit seemed worse than removing it.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also understand that there are some features in Ember.js that consistently trip up developers new to the framework. The Handlebars &lt;code&gt;{{bindAttr}}&lt;/code&gt; helper is a good example. We focus relentlessly on identifying and fixing these issues; you can see the start of an effort to improve this in the work that Yehuda has been doing on &lt;a href="http://github.com/tildeio/htmlbars"&gt;htmlbars&lt;/a&gt;, which will hopefully land in Ember 1.1.&lt;/p&gt;

&lt;p&gt;We&amp;#39;d like to give a big thank you to all of the contributors who have helped make Ember so successful. We believe that a truly community-backed open source project is important. Although it takes time to build that community, versus being able to hire a full-time staff, we believe that in the long run it leads to a stronger, more robust project that can&amp;#39;t be &amp;quot;Google Reader&amp;#39;d.&amp;quot; Immunity to any one company going under or pulling support is baked right in.&lt;/p&gt;

&lt;p&gt;Lastly, we&amp;#39;d love your help. If you think there&amp;#39;s something we&amp;#39;re missing, or if you&amp;#39;d like to volunteer to help, please let us know in &lt;a href="http://discuss.emberjs.com/t/ideas-for-improving-the-getting-started-experience/666"&gt;this Discourse thread&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All the best,&lt;br&gt;
Yehuda Katz &amp;amp; Tom Dale&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember 1.0 RC</title>
    <link rel="alternate" href="/blog/2013/02/15/ember-1-0-rc.html"/>
    <id>/blog/2013/02/15/ember-1-0-rc.html</id>
    <published>2013-02-15T00:00:00Z</published>
    <updated>2013-02-15T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Today at Ember Camp, we announced the release of Ember.js 1.0 RC1.&lt;/p&gt;

&lt;p&gt;This release is all about fixing bugs from the &lt;code&gt;pre4&lt;/code&gt; release, and
gets us that much closer to a final 1.0 release. Between this release
and the 1.0 final, we will mostly be focusing on stability and documentation.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Today at Ember Camp, we announced the release of Ember.js 1.0 RC1.&lt;/p&gt;

&lt;p&gt;This release is all about fixing bugs from the &lt;code&gt;pre4&lt;/code&gt; release, and
gets us that much closer to a final 1.0 release. Between this release
and the 1.0 final, we will mostly be focusing on stability and documentation.&lt;/p&gt;

&lt;p&gt;If you discover any blocking bugs or undocumented areas, please file tickets at
the emberjs/ember.js repo on GitHub and consider helping out.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_route-replacement'&gt;Route Replacement&lt;/h3&gt;
&lt;p&gt;You can now transition to a new route without creating an entry in the history:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// instead of this, which creates a history entry&lt;/span&gt;
router.transitionTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;index&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class="comment"&gt;// do this&lt;/span&gt;
router.replaceWith(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;index&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;In the &lt;code&gt;redirect&lt;/code&gt; hook, you can just use &lt;code&gt;replaceWith&lt;/code&gt; and Ember won&amp;#39;t create
a history entry.&lt;/p&gt;

&lt;p&gt;In a controller, you can use &lt;code&gt;replaceRoute&lt;/code&gt; (instead of &lt;code&gt;transitionToRoute&lt;/code&gt;)
to do the same thing.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_item-controller'&gt;Item Controller&lt;/h3&gt;
&lt;p&gt;If you want every item in a &lt;code&gt;{{#each}}&lt;/code&gt; to be wrapped in an &lt;code&gt;ObjectController&lt;/code&gt;,
you can do so easily:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{{&lt;span class="error"&gt;#&lt;/span&gt;each posts itemController=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}}
  {{!-- &lt;span class="error"&gt;`&lt;/span&gt;&lt;span class="local-variable"&gt;this&lt;/span&gt;&lt;span class="error"&gt;`&lt;/span&gt; &lt;span class="keyword"&gt;in&lt;/span&gt; here is each post wrapped &lt;span class="keyword"&gt;in&lt;/span&gt; an App.PostController --}}
{{&lt;span class="regexp"&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="content"&gt;each}}
&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_register-and-inject'&gt;Register and Inject&lt;/h3&gt;
&lt;p&gt;Internally, Ember uses a &amp;quot;container&amp;quot; to instantiate your controllers and other
objects.&lt;/p&gt;

&lt;p&gt;As of Ember 1.0 RC1, you can use &lt;code&gt;App.register&lt;/code&gt; to override the default lookup
for controllers and other objects. For example:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.register(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller:post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, Ember.ObjectController.extend());
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;In general, you should use the default naming conventions, which Ember will use
to find objects, but you can use this API for advanced usages.&lt;/p&gt;

&lt;p&gt;Similarly, you can use &lt;code&gt;App.inject&lt;/code&gt; to tell Ember to automatically inject
objects into other Ember objects.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.register(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;network:main&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, App.NetworkAdapter);
App.inject(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;network&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;network:main&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;This will create a single instance of &lt;code&gt;App.NetworkAdapter&lt;/code&gt; and give it to every
controller created over the course of building your application. Internally,
Ember Data uses this API to give every controller the application&amp;#39;s store:&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_router-activate-and-deactivate'&gt;Router Activate and Deactivate&lt;/h3&gt;
&lt;p&gt;Currently, many people are using the undocumented and private &lt;code&gt;enter&lt;/code&gt; and
&lt;code&gt;exit&lt;/code&gt; hooks to run code whenever Ember activates a route handler or
deactivates it.&lt;/p&gt;

&lt;p&gt;As of Ember 1.0 RC1, there are public hooks: &lt;code&gt;activate&lt;/code&gt; and &lt;code&gt;deactivate&lt;/code&gt;. Note
that the &lt;code&gt;activate&lt;/code&gt; hook will run only when a route handler is activated for
the first time. If a route handler&amp;#39;s context changes, the &lt;code&gt;setupController&lt;/code&gt;
hook will run again, but not the &lt;code&gt;activate&lt;/code&gt; hook.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_app-reset'&gt;App.reset()&lt;/h3&gt;
&lt;p&gt;If you are trying to run integration tests with Ember, you might have noticed
that there is no good way to reset all of an application&amp;#39;s state.&lt;/p&gt;

&lt;p&gt;No more!&lt;/p&gt;

&lt;p&gt;As of Ember 1.0 RC1, you can call &lt;code&gt;App.reset()&lt;/code&gt; to destroy all objects created
for the application, and bring the application back to &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_big-list-of-changes'&gt;Big List of Changes&lt;/h3&gt;
&lt;p&gt;Since &lt;code&gt;.pre4&lt;/code&gt;, we&amp;#39;ve added these features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added the ability to replace the current route without adding a history
entry, using &lt;code&gt;router.replaceWith&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added support for String literals in &lt;code&gt;{{action}}&lt;/code&gt; and &lt;code&gt;{{linkTo}}&lt;/code&gt; to
differentiate between static String parameters and properties on the current
context&lt;/li&gt;
&lt;li&gt;Allow redirection from routes that are not the final resting route&lt;/li&gt;
&lt;li&gt;Fix a bug where using named outlets would confuse where child templates should
be rendered into&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;itemController&lt;/code&gt;, which allows a &lt;code&gt;{{#each}}&lt;/code&gt; to wrap each iterated element
in a controller that can be used to store transient state&lt;/li&gt;
&lt;li&gt;Fix a bug involving {{else}} templates only working a single time&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;intersection&lt;/code&gt; to &lt;code&gt;EnumerableUtils&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;App.register&lt;/code&gt; and &lt;code&gt;App.inject&lt;/code&gt; to control the default application&amp;#39;s
dependency injection container&lt;/li&gt;
&lt;li&gt;Fixes regressions in jQuery 1.9 to address changes made to .attr and .prop&lt;/li&gt;
&lt;li&gt;Add support for &lt;code&gt;{{unbound helper}}&lt;/code&gt; where &lt;code&gt;helper&lt;/code&gt; is a custom helper
registered via &lt;code&gt;Ember.Handlebars.registerBoundHelper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;Ember.debug&lt;/code&gt; to print debug-level warnings and use it to print the
current version of Ember and its dependencies on boot&lt;/li&gt;
&lt;li&gt;Fix a bug where changing the model property passed to &lt;code&gt;{{render}}&lt;/code&gt; does not
update the rendered template&lt;/li&gt;
&lt;li&gt;Added public &lt;code&gt;activate&lt;/code&gt; and &lt;code&gt;deactivate&lt;/code&gt; hooks in the router. If you were
using the private &lt;code&gt;enter&lt;/code&gt; and &lt;code&gt;exit&lt;/code&gt; methods, please switch!&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;Application#reset&lt;/code&gt; to help with integration tests&lt;/li&gt;
&lt;li&gt;Several fixes for the Ember Inspector&lt;/li&gt;
&lt;li&gt;Many bug and performance fixes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see the full changelog at &lt;a href="https://github.com/emberjs/ember.js/blob/master/CHANGELOG"&gt;the official CHANGELOG&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>This Week in Ember</title>
    <link rel="alternate" href="/blog/2013/01/18/this-week-in-ember-js-4.html"/>
    <id>/blog/2013/01/18/this-week-in-ember-js-4.html</id>
    <published>2013-01-18T00:00:00Z</published>
    <updated>2013-01-18T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;It&amp;#39;s been a big month for Ember.js, and we&amp;#39;re excited about the progress
that we&amp;#39;ve made. With so much going on, it can be hard to
keep up-to-date with the project, so here&amp;#39;s what you need to know.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;It&amp;#39;s been a big month for Ember.js, and we&amp;#39;re excited about the progress
that we&amp;#39;ve made. With so much going on, it can be hard to
keep up-to-date with the project, so here&amp;#39;s what you need to know.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-camp'&gt;Ember Camp&lt;/h2&gt;
&lt;p&gt;While we have an incredible network of local meetup groups, &lt;a href="http://www.embercamp.com"&gt;Ember
Camp&lt;/a&gt; is the first national event for the Ember
community.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve been working hard on making sure that this event is both fun and
educational, and we&amp;#39;ll be announcing the lineup of speakers soon.
Unfortuately, tickets have sold out, so if you didn&amp;#39;t get yours this
time, make sure you grab a ticket next year!&lt;/p&gt;

&lt;p&gt;While Ember Camp is happening, keep an eye on this website and on &lt;a href="https://twitter.com/emberjs"&gt;our
Twitter account&lt;/a&gt;. There will be several announcements you won&amp;#39;t want
to miss!&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_peepcode'&gt;PeepCode&lt;/h2&gt;
&lt;p&gt;We were fortunate enough to get to spend a day with Geoffrey Grosenbach,
reviewing his in-progress PeepCode screencast about Ember.js. He spent a
lot of time getting to know Ember in-depth, and we think the final
product will be invaluable for new developers getting started with the
framework.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Finished an Ember.js demo app, filming screencast tomorrow, will publish next week. Fun stuff! &lt;a href="https://t.co/Sq4q85Ql" title="https://peepcode.com/system/uploads/2013/peepcode-emberjs-demo.png"&gt;peepcode.com/system/uploadsâ€¦&lt;/a&gt;&lt;/p&gt;&amp;mdash; PeepCode (@peepcode) &lt;a href="https://twitter.com/peepcode/status/291350861207187456" data-datetime="2013-01-16T01:07:13+00:00"&gt;January 16, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_the-road-to-1-0'&gt;The Road to 1.0&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;ve been tracking &lt;code&gt;master&lt;/code&gt; over the last month, you know that we
have made many large improvements to Ember.js in quick succession. Some
of these involved API changes that were not backwards compatible.&lt;/p&gt;

&lt;p&gt;We appreciate your patience as we round the corner to a 1.0 release. We
take feedback about &amp;quot;developer ergonomics&amp;quot; extremely seriously, and
we&amp;#39;re not willing to rush out a release if we&amp;#39;re not satisfied that the
API is as good as we can make it.&lt;/p&gt;

&lt;p&gt;Thanks for all your excellent feedback on earlier iterations of the
router API. Learning about how you found the API confusing or hard to
use drove our work on the final version that is shipping in &lt;code&gt;pre4&lt;/code&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_the-router'&gt;The Router&lt;/h3&gt;
&lt;p&gt;The first iteration of the Ember.js router (which some have colloquially
begun referring to as &amp;quot;v1&amp;quot;) allowed us to begin fleshing out some
conventions around application structure. Previously, application
structure was mostly done on an ad hoc basis, but common conventions
emerged in the community, which we rolled into &amp;quot;Router v1.&amp;quot;&lt;/p&gt;

&lt;p&gt;However, despite the fact that developers appreciated conventions around
app structure, their reaction to the first version of the API could
generously be described as &lt;em&gt;horrified&lt;/em&gt;. Indeed, the router for large
applications began to look like the twisted amalgams of views in old
SproutCore applications. We knew we had to head back to the drawing
board with the lessons we had learned.&lt;/p&gt;

&lt;p&gt;The reaction to &amp;quot;v2&amp;quot; of our router proposal, in contrast, has been
overwhelmingly positive. While we&amp;#39;ve had to make several tweaks over the
past month to make sure the API is as intuitive as possible, the overall
concepts behind the API have remained stable.&lt;/p&gt;

&lt;p&gt;We believe that we&amp;#39;ve finally worked out all of the kinks, and do not
have any plans to make any further backwards-incompatible changes to the
router API before the final 1.0 release.&lt;/p&gt;

&lt;p&gt;To learn what this router API is all about, head over to the &lt;a href="http://www.emberjs.com/guides/routing/"&gt;Routing
guide&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_api-freeze'&gt;API Freeze&lt;/h3&gt;
&lt;p&gt;In the run-up to Ember 1.0, we have chosen to aggressively make API
changes in response to your feedback in an effort to make the 1.0 API as
good as possible.&lt;/p&gt;

&lt;p&gt;The reward for putting up with that level of churn is that we plan to
keep things very stable after 1.0. As we get close to that milestone, we
are starting to freeze portions of the API.&lt;/p&gt;

&lt;p&gt;As of today, we will no longer make changes to the API that affect
high-level tutorials, screencasts or our introductory-level
documentation, unless such a change is necessary to address a critical
bug.&lt;/p&gt;

&lt;p&gt;When we release the first RC, we will no longer make changes that affect
any part of the documented APIâ€“againâ€“unless such a change is necessary
to address a critical bug.&lt;/p&gt;

&lt;p&gt;In keeping with &lt;a href="http://semver.org/"&gt;SemVer&lt;/a&gt;, once we release the final 1.0, we will
not make breaking, backwards-incompatible changes to publicly documented
APIs until Ember 2.0. We may deprecate APIs, and print deprecation
warnings in the debug build, but things will continue to work.&lt;/p&gt;

&lt;p&gt;In order to facilitate these API freezes, we are planning on taking
several steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We will convert high-profile screencasts and much of our public
documentation into integration tests. &amp;quot;Your commit broke the PeepCode
screencast&amp;quot; is something that Travis will tell contributors.&lt;/li&gt;
&lt;li&gt;We will freeze the Ember 1.0 tests and run them against all builds of
Ember in the 1.x series. This will notify us if we make a
potentially backwards-incompatible change, and we can examine if it
is the result of an API change or simply brittle tests. If we have to
modify an old test, we will announce it here.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class='anchorable-toc' id='toc_documentation'&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Perhaps the most widespread feedback we received from developers was:
&lt;em&gt;&amp;quot;Ember.js looks really cool, but your documentation sucks.&amp;quot;&lt;/em&gt; We heard
you loud and clear.&lt;/p&gt;

&lt;p&gt;We recently launched the &lt;a href="http://www.emberjs.com/guides/"&gt;completely redesigned Guides&lt;/a&gt;, and due to
their more focused nature, have been able to rapidly iterate on them.
Since deploying the new site, the bounce rate has dropped dramatically
and engagement with any particular page has nearly doubled.&lt;/p&gt;

&lt;p&gt;We have lots more great documentation coming your way as we approach the
1.0 release, and we think the design work that &lt;a href="http://www.heropixel.com"&gt;Matt Grantham&lt;/a&gt; did on
the new guides will make them much easier for new developers to approach.&lt;/p&gt;

&lt;p&gt;We are also working on improving the API reference documentation. In
particular, &lt;a href="https://twitter.com/stefanpenner"&gt;Stefan Penner&lt;/a&gt; has been putting in a heroic effort to
bring them up to a similarly polished look-and-feel as the guides.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_thanks'&gt;Thanks&lt;/h2&gt;
&lt;p&gt;We&amp;#39;ve been working on Ember.js for just over a year now, and it&amp;#39;s no
understatement to say that it has attracted some of the best and
brightest web engineers on the planet. It has been extremely gratifying
to see our ideas take form, and we can&amp;#39;t wait to see what 2013 holds for
web applications.&lt;/p&gt;

&lt;p&gt;Big thanks to all of &lt;a href="https://github.com/emberjs/ember.js/graphs/contributors"&gt;our contributors&lt;/a&gt;, who have poured hours of
their nights and weekends into helping us make one of the best tools for
writing ambitious web applications. We quite literally could not have
done it without you.&lt;/p&gt;

&lt;p&gt;Wishing you all the best in the new year,&lt;br&gt;
Yehuda Katz &amp;amp; Tom Dale&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>This Week in Ember.js</title>
    <link rel="alternate" href="/blog/2012/12/22/this-week-in-ember-js-3.html"/>
    <id>/blog/2012/12/22/this-week-in-ember-js-3.html</id>
    <published>2012-12-22T00:00:00Z</published>
    <updated>2012-12-22T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Only a few more days left, I hope everyone&amp;#39;s had a great 2012,
while you get ready for the New Year, here&amp;#39;s what&amp;#39;s been happening in Ember.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Only a few more days left, I hope everyone&amp;#39;s had a great 2012,
while you get ready for the New Year, here&amp;#39;s what&amp;#39;s been happening in Ember.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_new-router-api'&gt;New Router API&lt;/h3&gt;
&lt;p&gt;The new router API is has been &lt;a href="https://github.com/emberjs/ember.js/commit/44b23dcf245b0fffdeb29f9f8a5d1bbdc9eb7690"&gt;merged into
master!&lt;/a&gt;
We&amp;#39;ve spent a lot of time incorporating feedback about our first
iteration of the router, and we think you&amp;#39;re going to really love what
we&amp;#39;ve come up with. It makes getting started super simple, and
eliminates the old API that forced you to write unwieldy nested objects.&lt;/p&gt;

&lt;p&gt;There is a &lt;a href="https://gist.github.com/3981133"&gt;short walkthrough&lt;/a&gt; that
describes the thinking behind the new API. Full documentation should be
landing this week.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_embedded-records'&gt;Embedded Records&lt;/h3&gt;
&lt;p&gt;After a massive refactor of the Ember Data library, it now fully
supports embedded records, amongst other goodies.&lt;/p&gt;

&lt;p&gt;As always, check out &lt;a href="https://github.com/emberjs/data/blob/master/BREAKING_CHANGES.md"&gt;BREAKING_CHANGES&lt;/a&gt;
for information about updating your apps.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ds-jsonserializer'&gt;DS.JSONSerializer&lt;/h3&gt;
&lt;p&gt;In the last post we talked about the changes in the serialization API&amp;#39;s renaming methods
to remove the JSON specificity whilst adding hooks to manage relationship dirtiness.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve now fully extracted all the JSON semantics from &lt;code&gt;DS.Serializer&lt;/code&gt; into it&amp;#39;s own class.
The &lt;code&gt;DS.JSONSerializer&lt;/code&gt; is a subclass of &lt;code&gt;DS.Serializer&lt;/code&gt; which implements
the JSON-specific semantics. The &lt;code&gt;RESTAdapter&lt;/code&gt; now uses the &lt;code&gt;JSONSerializer&lt;/code&gt; by
default so if you are using that there is no need to change anything in your application.&lt;/p&gt;

&lt;p&gt;After some feedback we&amp;#39;ve also renamed &lt;code&gt;toData/fromData&lt;/code&gt; to &lt;code&gt;serialize/deserialize&lt;/code&gt;
for a more friendly API.&lt;/p&gt;

&lt;p&gt;As always, check out &lt;a href="https://github.com/emberjs/data/blob/master/BREAKING_CHANGES.md"&gt;BREAKING_CHANGES&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_bound-handlebars-helpers'&gt;Bound handlebars helpers&lt;/h3&gt;
&lt;p&gt;Ember.Handlebars just got a little bit smarter. &lt;code&gt;Ember.Handlebars.registerBoundHelper&lt;/code&gt;
provides a way to easily create your own bound custom helpers.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_example'&gt;Example:&lt;/h4&gt;&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;  Ember.Handlebars.registerBoundHelper(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;capitalize&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(value) {
    &lt;span class="keyword"&gt;return&lt;/span&gt; value.toUpperCase();
  });
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;which can be used in your templates as follows:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;capitalize&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_ember-object-create-behavior-change'&gt;Ember.Object.create behavior change&lt;/h3&gt;
&lt;p&gt;The new behavior will call computed property setters instead of overwriting them.&lt;br&gt;
We suggest using &lt;code&gt;Ember.Object.extend()&lt;/code&gt; to create classes and use &lt;code&gt;create&lt;/code&gt; to initialize
properties on your instance. The old behavior is available via &lt;code&gt;createWithMixins&lt;/code&gt;.&lt;br&gt;
This change should increase object creation performance by 2x.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_other-changes-of-note'&gt;Other changes of note&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;reject&lt;/code&gt; and &lt;code&gt;rejectProperty&lt;/code&gt; methods have been added to &lt;code&gt;Ember.Enumerable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ember.none&lt;/code&gt; and &lt;code&gt;Ember.empty&lt;/code&gt; have been renamed to &lt;code&gt;Ember.isEmpty&lt;/code&gt; and &lt;code&gt;Ember.isNone&lt;/code&gt;
to keep with the Ember Boolean naming convention.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_embercamp'&gt;EmberCamp&lt;/h3&gt;
&lt;p&gt;The very first Ember Camp in SF is happening on the 15th February 2013.
&lt;a href="https://tito.io/tilde/ember-camp-2013"&gt;Sign up here&lt;/a&gt;, be quick, tickets are limited.&lt;/p&gt;

&lt;p&gt;Looking to learn Ember? There&amp;#39;s also an &lt;a href="http://www.embertraining.com/"&gt;Introduction to Ember&lt;/a&gt;
event in the week leading up to Ember Camp.&lt;/p&gt;

&lt;p&gt;Enjoy your holiday,&lt;br&gt;
Bradley Priest&lt;br&gt;
&lt;a href="https://twitter.com/bradleypriest"&gt;@bradleypriest&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>This Week in Ember.js</title>
    <link rel="alternate" href="/blog/2012/12/02/this-week-in-ember-js-2.html"/>
    <id>/blog/2012/12/02/this-week-in-ember-js-2.html</id>
    <published>2012-12-02T00:00:00Z</published>
    <updated>2012-12-02T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;There&amp;#39;s been a lot of exciting changes going in the Ember.js community, here&amp;#39;s a recap of some of the biggest updates.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;There&amp;#39;s been a lot of exciting changes going in the Ember.js community, here&amp;#39;s a recap of some of the biggest updates.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_data-format-agnosticism'&gt;Data Format Agnosticism&lt;/h3&gt;
&lt;p&gt;While we believe the vast majority of Ember.js apps will be using JSON for
communication, there&amp;#39;s no reason to restrict it so.&lt;/p&gt;

&lt;p&gt;To this end we&amp;#39;ve made two changes to Ember Data&amp;#39;s &lt;code&gt;DS.Store&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A new &lt;code&gt;extractId&lt;/code&gt; method has been added to the adapter for extracting the
 ID from a data hash, by default this simply asks for &lt;code&gt;data.id&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Any method with the term &lt;code&gt;JSON&lt;/code&gt; has been renamed to use &lt;code&gt;Data&lt;/code&gt; instead,
 for instance &lt;code&gt;DS.Serializer&lt;/code&gt;&amp;#39;s &lt;code&gt;toJSON&lt;/code&gt; method has been renamed to &lt;code&gt;toData&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are using the built-in &lt;code&gt;DS.RESTAdapter&lt;/code&gt;, these changes do not affect you.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://github.com/emberjs/data/blob/master/BREAKING_CHANGES.md"&gt;BREAKING_CHANGES&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_adapter-dirtiness-hooks'&gt;Adapter Dirtiness Hooks&lt;/h3&gt;
&lt;p&gt;In line with the efforts to decouple Ember.js from REST specifics, we&amp;#39;ve made
some more changes to how the adapter dirties records in relationships.&lt;/p&gt;

&lt;p&gt;Previously the store would dirty all the objects involved when a relationship was modified
and let the adapter decide what to do with the records on &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As of revision 9, Ember now provides a series of adapter dirtiness hooks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dirtyRecordsForAttributeChange&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dirtyRecordsForBelongsToChange&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dirtyRecordsForHasManyChange&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By firing these hooks at the time of dirtying, the adapter can mark the
appropriate objects as dirty and move on.&lt;/p&gt;

&lt;p&gt;If you are using the built-in &lt;code&gt;DS.RESTAdapter&lt;/code&gt;, these changes do not affect you.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://github.com/emberjs/data/blob/master/BREAKING_CHANGES.md"&gt;BREAKING_CHANGES&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_new-router-api'&gt;New Router API&lt;/h3&gt;
&lt;p&gt;Managing state in intermediate- to large-scale applications is a major
challenge for web developers. In fact, that&amp;#39;s part of the reason so many
people love Ember.jsâ€”tools like the router built-in to the framework
make dealing with complex state manageable.&lt;/p&gt;

&lt;p&gt;Still, we&amp;#39;ve heard the feedback loud and clear that the current router
API is too hard to understand, complicated to maintain, and aesthetically
unpleasing.&lt;/p&gt;

&lt;p&gt;Because we think the router is the centerpiece of Ember, we&amp;#39;ve been working hard to get this right.&lt;/p&gt;

&lt;p&gt;Implementation has been started on a new router API. You can check out the progress on
the &lt;a href="https://github.com/emberjs/ember.js/tree/new-router"&gt;new-router&lt;/a&gt; branch.&lt;/p&gt;

&lt;p&gt;Check out a quick rundown of the changes in &lt;a href="https://gist.github.com/3981133"&gt;this gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We believe that this is the final step to make Ember an easily accessible
framework for new developers.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_view-default-context'&gt;View default context&lt;/h3&gt;
&lt;p&gt;Although it has been deprecated for a while, we&amp;#39;ve &lt;a href="https://github.com/emberjs/ember.js/commit/ed38ab3777733597ac5abd33ce26c3edeb2d7d13"&gt;finally removed&lt;/a&gt;
the defaulting of a view&amp;#39;s context to itself if none was provided. This should
not be an issue for most applications out there, but may break example snippets
around the place.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_meetups'&gt;Meetups&lt;/h3&gt;
&lt;p&gt;Zendesk is hosting the &lt;a href="http://www.meetup.com/Ember-SF/events/89198892/"&gt;SF Ember.js Meetup&lt;/a&gt;
on Tuesday 4 December, if you&amp;#39;re in the area please head along and
hang out with fellow EmberenÃµs.&lt;/p&gt;

&lt;p&gt;Likewise, Tom Dale and Yehuda Katz will be making an
appearance at the &lt;a href="http://www.meetup.com/Ember-js-Seattle-Meetup/events/68465172/"&gt;Seattle Ember.js DecEMBER Meetup&lt;/a&gt;
on Thursday 6 December.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s all for this week,&lt;br&gt;
Bradley Priest&lt;br&gt;
&lt;a href="https://twitter.com/bradleypriest"&gt;@bradleypriest&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
